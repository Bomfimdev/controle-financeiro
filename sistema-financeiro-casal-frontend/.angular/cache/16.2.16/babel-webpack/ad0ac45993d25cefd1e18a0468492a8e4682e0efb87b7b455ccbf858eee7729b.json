{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Bomfim/Documents/GitHub/Controle-financeiro-casal/workspace/sistema-financeiro-casal-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { createClient } from '@supabase/supabase-js';\nimport { BehaviorSubject } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nexport class SupabaseService {\n  constructor() {\n    this.currentUser = new BehaviorSubject(null);\n    this.supabase = createClient(environment.supabaseUrl, environment.supabaseKey);\n    // Verificar se o usuário já está autenticado\n    this.supabase.auth.onAuthStateChange((event, session) => {\n      if (session?.user) {\n        this.currentUser.next(session.user);\n      } else {\n        this.currentUser.next(null);\n      }\n    });\n    // Carregar usuário inicial\n    this.loadUser();\n  }\n  loadUser() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const {\n        data\n      } = yield _this.supabase.auth.getUser();\n      _this.currentUser.next(data.user);\n    })();\n  }\n  // Retorna o usuário atual como um Observable\n  getCurrentUser() {\n    return this.currentUser.asObservable();\n  }\n  // Retorna o usuário atual diretamente\n  getCurrentUserValue() {\n    return this.currentUser.value;\n  }\n  // Registro de novo usuário\n  signUp(email, password) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const response = yield _this2.supabase.auth.signUp({\n        email,\n        password\n      });\n      if (response.data?.user) {\n        _this2.currentUser.next(response.data.user);\n      }\n      return response;\n    })();\n  }\n  // Login de usuário\n  signIn(email, password) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const response = yield _this3.supabase.auth.signInWithPassword({\n        email,\n        password\n      });\n      if (response.data?.user) {\n        _this3.currentUser.next(response.data.user);\n      }\n      return response;\n    })();\n  }\n  // Logout\n  signOut() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        error\n      } = yield _this4.supabase.auth.signOut();\n      if (!error) {\n        _this4.currentUser.next(null);\n      }\n      return {\n        error\n      };\n    })();\n  }\n  // Recuperação de senha\n  resetPassword(email) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      return _this5.supabase.auth.resetPasswordForEmail(email);\n    })();\n  }\n  // Retorna a instância do Supabase para uso direto\n  getSupabase() {\n    return this.supabase;\n  }\n  // Operações na tabela 'contas'\n  getConta(id) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      return _this6.supabase.from('contas').select('*').eq('id', id).single();\n    })();\n  }\n  getContasDoUsuario() {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      const user = _this7.getCurrentUserValue();\n      if (!user) return {\n        data: null,\n        error: 'Usuário não autenticado'\n      };\n      return _this7.supabase.from('contas').select('*').or(`usuario1_id.eq.${user.id},usuario2_id.eq.${user.id}`);\n    })();\n  }\n  criarConta(nome, saldo_inicial, usuario2_email) {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      const user = _this8.getCurrentUserValue();\n      if (!user) return {\n        data: null,\n        error: 'Usuário não autenticado'\n      };\n      let usuario2_id = null;\n      if (usuario2_email) {\n        const {\n          data: usuario2\n        } = yield _this8.supabase.from('usuarios').select('id').eq('email', usuario2_email).single();\n        if (usuario2) {\n          usuario2_id = usuario2.id;\n        }\n      }\n      return _this8.supabase.from('contas').insert({\n        nome,\n        saldo_inicial,\n        saldo_atual: saldo_inicial,\n        usuario1_id: user.id,\n        usuario2_id\n      }).select().single();\n    })();\n  }\n  atualizarConta(id, dados) {\n    var _this9 = this;\n    return _asyncToGenerator(function* () {\n      return _this9.supabase.from('contas').update(dados).eq('id', id);\n    })();\n  }\n  excluirConta(id) {\n    var _this0 = this;\n    return _asyncToGenerator(function* () {\n      return _this0.supabase.from('contas').delete().eq('id', id);\n    })();\n  }\n  // Operações na tabela 'transacoes'\n  getTransacoesDaConta(contaId, filtros) {\n    var _this1 = this;\n    return _asyncToGenerator(function* () {\n      let query = _this1.supabase.from('transacoes').select('*').eq('conta_id', contaId);\n      // Aplicar filtros se fornecidos\n      if (filtros) {\n        if (filtros.tipo) {\n          query = query.eq('tipo', filtros.tipo);\n        }\n        if (filtros.categoria) {\n          query = query.eq('categoria', filtros.categoria);\n        }\n        if (filtros.dataInicio) {\n          query = query.gte('data', filtros.dataInicio);\n        }\n        if (filtros.dataFim) {\n          query = query.lte('data', filtros.dataFim);\n        }\n      }\n      // Ordenar por data, mais recente primeiro\n      query = query.order('data', {\n        ascending: false\n      });\n      return query;\n    })();\n  }\n  criarTransacao(dados) {\n    var _this10 = this;\n    return _asyncToGenerator(function* () {\n      return _this10.supabase.from('transacoes').insert(dados).select().single();\n    })();\n  }\n  atualizarTransacao(id, dados) {\n    var _this11 = this;\n    return _asyncToGenerator(function* () {\n      return _this11.supabase.from('transacoes').update(dados).eq('id', id);\n    })();\n  }\n  excluirTransacao(id) {\n    var _this12 = this;\n    return _asyncToGenerator(function* () {\n      return _this12.supabase.from('transacoes').delete().eq('id', id);\n    })();\n  }\n  // Obter categorias distintas\n  getCategorias() {\n    var _this13 = this;\n    return _asyncToGenerator(function* () {\n      return _this13.supabase.from('transacoes').select('categoria').order('categoria');\n    })();\n  }\n  // Resumo por categoria\n  getResumoPorCategoria(contaId, periodo) {\n    var _this14 = this;\n    return _asyncToGenerator(function* () {\n      let query = _this14.supabase.rpc('resumo_por_categoria', {\n        p_conta_id: contaId\n      });\n      if (periodo) {\n        query = query.eq('p_data_inicio', periodo.inicio).eq('p_data_fim', periodo.fim);\n      }\n      return query;\n    })();\n  }\n  // Perfil do usuário\n  updateUserProfile(profile) {\n    var _this15 = this;\n    return _asyncToGenerator(function* () {\n      const user = yield _this15.getCurrentUserValue();\n      if (!user) throw new Error('Usuário não autenticado');\n      return _this15.supabase.from('perfis').upsert({\n        id: user.id,\n        nome: profile.nome,\n        sobrenome: profile.sobrenome,\n        updated_at: new Date()\n      });\n    })();\n  }\n  getUserProfile() {\n    var _this16 = this;\n    return _asyncToGenerator(function* () {\n      const user = yield _this16.getCurrentUserValue();\n      if (!user) throw new Error('Usuário não autenticado');\n      return _this16.supabase.from('perfis').select('*').eq('id', user.id).single();\n    })();\n  }\n  // Contas\n  getContas() {\n    var _this17 = this;\n    return _asyncToGenerator(function* () {\n      const user = yield _this17.getCurrentUserValue();\n      if (!user) throw new Error('Usuário não autenticado');\n      return _this17.supabase.from('contas').select('*').eq('usuario_id', user.id).order('nome');\n    })();\n  }\n  criarConta(conta) {\n    var _this18 = this;\n    return _asyncToGenerator(function* () {\n      const user = yield _this18.getCurrentUserValue();\n      if (!user) throw new Error('Usuário não autenticado');\n      return _this18.supabase.from('contas').insert({\n        ...conta,\n        usuario_id: user.id,\n        created_at: new Date()\n      });\n    })();\n  }\n  atualizarConta(id, conta) {\n    var _this19 = this;\n    return _asyncToGenerator(function* () {\n      const user = yield _this19.getCurrentUserValue();\n      if (!user) throw new Error('Usuário não autenticado');\n      return _this19.supabase.from('contas').update({\n        ...conta,\n        updated_at: new Date()\n      }).eq('id', id).eq('usuario_id', user.id);\n    })();\n  }\n  excluirConta(id) {\n    var _this20 = this;\n    return _asyncToGenerator(function* () {\n      const user = yield _this20.getCurrentUserValue();\n      if (!user) throw new Error('Usuário não autenticado');\n      return _this20.supabase.from('contas').delete().eq('id', id).eq('usuario_id', user.id);\n    })();\n  }\n  // Transações\n  getTransacoes() {\n    var _this21 = this;\n    return _asyncToGenerator(function* () {\n      const user = yield _this21.getCurrentUserValue();\n      if (!user) throw new Error('Usuário não autenticado');\n      return _this21.supabase.from('transacoes').select(`\n        *,\n        conta:contas(nome)\n      `).eq('usuario_id', user.id).order('data', {\n        ascending: false\n      });\n    })();\n  }\n  criarTransacao(transacao) {\n    var _this22 = this;\n    return _asyncToGenerator(function* () {\n      const user = yield _this22.getCurrentUserValue();\n      if (!user) throw new Error('Usuário não autenticado');\n      return _this22.supabase.from('transacoes').insert({\n        ...transacao,\n        usuario_id: user.id,\n        created_at: new Date()\n      });\n    })();\n  }\n  atualizarTransacao(id, transacao) {\n    var _this23 = this;\n    return _asyncToGenerator(function* () {\n      const user = yield _this23.getCurrentUserValue();\n      if (!user) throw new Error('Usuário não autenticado');\n      return _this23.supabase.from('transacoes').update({\n        ...transacao,\n        updated_at: new Date()\n      }).eq('id', id).eq('usuario_id', user.id);\n    })();\n  }\n  excluirTransacao(id) {\n    var _this24 = this;\n    return _asyncToGenerator(function* () {\n      const user = yield _this24.getCurrentUserValue();\n      if (!user) throw new Error('Usuário não autenticado');\n      return _this24.supabase.from('transacoes').delete().eq('id', id).eq('usuario_id', user.id);\n    })();\n  }\n  static {\n    this.ɵfac = function SupabaseService_Factory(t) {\n      return new (t || SupabaseService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: SupabaseService,\n      factory: SupabaseService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["createClient","BehaviorSubject","environment","SupabaseService","constructor","currentUser","supabase","supabaseUrl","supabaseKey","auth","onAuthStateChange","event","session","user","next","loadUser","_this","_asyncToGenerator","data","getUser","getCurrentUser","asObservable","getCurrentUserValue","value","signUp","email","password","_this2","response","signIn","_this3","signInWithPassword","signOut","_this4","error","resetPassword","_this5","resetPasswordForEmail","getSupabase","getConta","id","_this6","from","select","eq","single","getContasDoUsuario","_this7","or","criarConta","nome","saldo_inicial","usuario2_email","_this8","usuario2_id","usuario2","insert","saldo_atual","usuario1_id","atualizarConta","dados","_this9","update","excluirConta","_this0","delete","getTransacoesDaConta","contaId","filtros","_this1","query","tipo","categoria","dataInicio","gte","dataFim","lte","order","ascending","criarTransacao","_this10","atualizarTransacao","_this11","excluirTransacao","_this12","getCategorias","_this13","getResumoPorCategoria","periodo","_this14","rpc","p_conta_id","inicio","fim","updateUserProfile","profile","_this15","Error","upsert","sobrenome","updated_at","Date","getUserProfile","_this16","getContas","_this17","conta","_this18","usuario_id","created_at","_this19","_this20","getTransacoes","_this21","transacao","_this22","_this23","_this24","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Bomfim\\Documents\\GitHub\\Controle-financeiro-casal\\workspace\\sistema-financeiro-casal-frontend\\src\\app\\services\\supabase.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { createClient, SupabaseClient, User, AuthResponse } from '@supabase/supabase-js';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { environment } from '../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SupabaseService {\n  private supabase: SupabaseClient;\n  private currentUser = new BehaviorSubject<User | null>(null);\n\n  constructor() {\n    this.supabase = createClient(\n      environment.supabaseUrl,\n      environment.supabaseKey\n    );\n    \n    // Verificar se o usuário já está autenticado\n    this.supabase.auth.onAuthStateChange((event, session) => {\n      if (session?.user) {\n        this.currentUser.next(session.user);\n      } else {\n        this.currentUser.next(null);\n      }\n    });\n\n    // Carregar usuário inicial\n    this.loadUser();\n  }\n\n  private async loadUser() {\n    const { data } = await this.supabase.auth.getUser();\n    this.currentUser.next(data.user);\n  }\n\n  // Retorna o usuário atual como um Observable\n  public getCurrentUser(): Observable<User | null> {\n    return this.currentUser.asObservable();\n  }\n\n  // Retorna o usuário atual diretamente\n  public getCurrentUserValue(): User | null {\n    return this.currentUser.value;\n  }\n\n  // Registro de novo usuário\n  public async signUp(email: string, password: string): Promise<AuthResponse> {\n    const response = await this.supabase.auth.signUp({\n      email,\n      password\n    });\n    \n    if (response.data?.user) {\n      this.currentUser.next(response.data.user);\n    }\n    \n    return response;\n  }\n\n  // Login de usuário\n  public async signIn(email: string, password: string): Promise<AuthResponse> {\n    const response = await this.supabase.auth.signInWithPassword({\n      email,\n      password\n    });\n    \n    if (response.data?.user) {\n      this.currentUser.next(response.data.user);\n    }\n    \n    return response;\n  }\n\n  // Logout\n  public async signOut(): Promise<{ error: any }> {\n    const { error } = await this.supabase.auth.signOut();\n    if (!error) {\n      this.currentUser.next(null);\n    }\n    return { error };\n  }\n\n  // Recuperação de senha\n  public async resetPassword(email: string): Promise<{ data: any, error: any }> {\n    return this.supabase.auth.resetPasswordForEmail(email);\n  }\n\n  // Retorna a instância do Supabase para uso direto\n  public getSupabase(): SupabaseClient {\n    return this.supabase;\n  }\n\n  // Operações na tabela 'contas'\n  public async getConta(id: string) {\n    return this.supabase\n      .from('contas')\n      .select('*')\n      .eq('id', id)\n      .single();\n  }\n\n  public async getContasDoUsuario() {\n    const user = this.getCurrentUserValue();\n    if (!user) return { data: null, error: 'Usuário não autenticado' };\n\n    return this.supabase\n      .from('contas')\n      .select('*')\n      .or(`usuario1_id.eq.${user.id},usuario2_id.eq.${user.id}`);\n  }\n\n  public async criarConta(nome: string, saldo_inicial: number, usuario2_email?: string) {\n    const user = this.getCurrentUserValue();\n    if (!user) return { data: null, error: 'Usuário não autenticado' };\n\n    let usuario2_id = null;\n    if (usuario2_email) {\n      const { data: usuario2 } = await this.supabase\n        .from('usuarios')\n        .select('id')\n        .eq('email', usuario2_email)\n        .single();\n      \n      if (usuario2) {\n        usuario2_id = usuario2.id;\n      }\n    }\n\n    return this.supabase\n      .from('contas')\n      .insert({\n        nome,\n        saldo_inicial,\n        saldo_atual: saldo_inicial,\n        usuario1_id: user.id,\n        usuario2_id\n      })\n      .select()\n      .single();\n  }\n\n  public async atualizarConta(id: string, dados: any) {\n    return this.supabase\n      .from('contas')\n      .update(dados)\n      .eq('id', id);\n  }\n\n  public async excluirConta(id: string) {\n    return this.supabase\n      .from('contas')\n      .delete()\n      .eq('id', id);\n  }\n\n  // Operações na tabela 'transacoes'\n  public async getTransacoesDaConta(contaId: string, filtros?: any) {\n    let query = this.supabase\n      .from('transacoes')\n      .select('*')\n      .eq('conta_id', contaId);\n\n    // Aplicar filtros se fornecidos\n    if (filtros) {\n      if (filtros.tipo) {\n        query = query.eq('tipo', filtros.tipo);\n      }\n      if (filtros.categoria) {\n        query = query.eq('categoria', filtros.categoria);\n      }\n      if (filtros.dataInicio) {\n        query = query.gte('data', filtros.dataInicio);\n      }\n      if (filtros.dataFim) {\n        query = query.lte('data', filtros.dataFim);\n      }\n    }\n\n    // Ordenar por data, mais recente primeiro\n    query = query.order('data', { ascending: false });\n\n    return query;\n  }\n\n  public async criarTransacao(dados: any) {\n    return this.supabase\n      .from('transacoes')\n      .insert(dados)\n      .select()\n      .single();\n  }\n\n  public async atualizarTransacao(id: string, dados: any) {\n    return this.supabase\n      .from('transacoes')\n      .update(dados)\n      .eq('id', id);\n  }\n\n  public async excluirTransacao(id: string) {\n    return this.supabase\n      .from('transacoes')\n      .delete()\n      .eq('id', id);\n  }\n\n  // Obter categorias distintas\n  public async getCategorias() {\n    return this.supabase\n      .from('transacoes')\n      .select('categoria')\n      .order('categoria');\n  }\n\n  // Resumo por categoria\n  public async getResumoPorCategoria(contaId: string, periodo?: { inicio: string, fim: string }) {\n    let query = this.supabase.rpc('resumo_por_categoria', { \n      p_conta_id: contaId\n    });\n\n    if (periodo) {\n      query = query.eq('p_data_inicio', periodo.inicio).eq('p_data_fim', periodo.fim);\n    }\n\n    return query;\n  }\n\n  // Perfil do usuário\n  async updateUserProfile(profile: { nome: string; sobrenome: string }) {\n    const user = await this.getCurrentUserValue();\n    if (!user) throw new Error('Usuário não autenticado');\n\n    return this.supabase\n      .from('perfis')\n      .upsert({\n        id: user.id,\n        nome: profile.nome,\n        sobrenome: profile.sobrenome,\n        updated_at: new Date()\n      });\n  }\n\n  async getUserProfile() {\n    const user = await this.getCurrentUserValue();\n    if (!user) throw new Error('Usuário não autenticado');\n\n    return this.supabase\n      .from('perfis')\n      .select('*')\n      .eq('id', user.id)\n      .single();\n  }\n\n  // Contas\n  async getContas() {\n    const user = await this.getCurrentUserValue();\n    if (!user) throw new Error('Usuário não autenticado');\n\n    return this.supabase\n      .from('contas')\n      .select('*')\n      .eq('usuario_id', user.id)\n      .order('nome');\n  }\n\n  async criarConta(conta: { nome: string; saldo: number; tipo: string }) {\n    const user = await this.getCurrentUserValue();\n    if (!user) throw new Error('Usuário não autenticado');\n\n    return this.supabase\n      .from('contas')\n      .insert({\n        ...conta,\n        usuario_id: user.id,\n        created_at: new Date()\n      });\n  }\n\n  async atualizarConta(id: string, conta: { nome: string; saldo: number; tipo: string }) {\n    const user = await this.getCurrentUserValue();\n    if (!user) throw new Error('Usuário não autenticado');\n\n    return this.supabase\n      .from('contas')\n      .update({\n        ...conta,\n        updated_at: new Date()\n      })\n      .eq('id', id)\n      .eq('usuario_id', user.id);\n  }\n\n  async excluirConta(id: string) {\n    const user = await this.getCurrentUserValue();\n    if (!user) throw new Error('Usuário não autenticado');\n\n    return this.supabase\n      .from('contas')\n      .delete()\n      .eq('id', id)\n      .eq('usuario_id', user.id);\n  }\n\n  // Transações\n  async getTransacoes() {\n    const user = await this.getCurrentUserValue();\n    if (!user) throw new Error('Usuário não autenticado');\n\n    return this.supabase\n      .from('transacoes')\n      .select(`\n        *,\n        conta:contas(nome)\n      `)\n      .eq('usuario_id', user.id)\n      .order('data', { ascending: false });\n  }\n\n  async criarTransacao(transacao: {\n    conta_id: string;\n    valor: number;\n    tipo: string;\n    categoria: string;\n    descricao: string;\n    data: Date;\n  }) {\n    const user = await this.getCurrentUserValue();\n    if (!user) throw new Error('Usuário não autenticado');\n\n    return this.supabase\n      .from('transacoes')\n      .insert({\n        ...transacao,\n        usuario_id: user.id,\n        created_at: new Date()\n      });\n  }\n\n  async atualizarTransacao(\n    id: string,\n    transacao: {\n      conta_id: string;\n      valor: number;\n      tipo: string;\n      categoria: string;\n      descricao: string;\n      data: Date;\n    }\n  ) {\n    const user = await this.getCurrentUserValue();\n    if (!user) throw new Error('Usuário não autenticado');\n\n    return this.supabase\n      .from('transacoes')\n      .update({\n        ...transacao,\n        updated_at: new Date()\n      })\n      .eq('id', id)\n      .eq('usuario_id', user.id);\n  }\n\n  async excluirTransacao(id: string) {\n    const user = await this.getCurrentUserValue();\n    if (!user) throw new Error('Usuário não autenticado');\n\n    return this.supabase\n      .from('transacoes')\n      .delete()\n      .eq('id', id)\n      .eq('usuario_id', user.id);\n  }\n}"],"mappings":";AACA,SAASA,YAAY,QAA4C,uBAAuB;AACxF,SAASC,eAAe,QAAoB,MAAM;AAClD,SAASC,WAAW,QAAQ,gCAAgC;;AAK5D,OAAM,MAAOC,eAAe;EAI1BC,YAAA;IAFQ,KAAAC,WAAW,GAAG,IAAIJ,eAAe,CAAc,IAAI,CAAC;IAG1D,IAAI,CAACK,QAAQ,GAAGN,YAAY,CAC1BE,WAAW,CAACK,WAAW,EACvBL,WAAW,CAACM,WAAW,CACxB;IAED;IACA,IAAI,CAACF,QAAQ,CAACG,IAAI,CAACC,iBAAiB,CAAC,CAACC,KAAK,EAAEC,OAAO,KAAI;MACtD,IAAIA,OAAO,EAAEC,IAAI,EAAE;QACjB,IAAI,CAACR,WAAW,CAACS,IAAI,CAACF,OAAO,CAACC,IAAI,CAAC;OACpC,MAAM;QACL,IAAI,CAACR,WAAW,CAACS,IAAI,CAAC,IAAI,CAAC;;IAE/B,CAAC,CAAC;IAEF;IACA,IAAI,CAACC,QAAQ,EAAE;EACjB;EAEcA,QAAQA,CAAA;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MACpB,MAAM;QAAEC;MAAI,CAAE,SAASF,KAAI,CAACV,QAAQ,CAACG,IAAI,CAACU,OAAO,EAAE;MACnDH,KAAI,CAACX,WAAW,CAACS,IAAI,CAACI,IAAI,CAACL,IAAI,CAAC;IAAC;EACnC;EAEA;EACOO,cAAcA,CAAA;IACnB,OAAO,IAAI,CAACf,WAAW,CAACgB,YAAY,EAAE;EACxC;EAEA;EACOC,mBAAmBA,CAAA;IACxB,OAAO,IAAI,CAACjB,WAAW,CAACkB,KAAK;EAC/B;EAEA;EACaC,MAAMA,CAACC,KAAa,EAAEC,QAAgB;IAAA,IAAAC,MAAA;IAAA,OAAAV,iBAAA;MACjD,MAAMW,QAAQ,SAASD,MAAI,CAACrB,QAAQ,CAACG,IAAI,CAACe,MAAM,CAAC;QAC/CC,KAAK;QACLC;OACD,CAAC;MAEF,IAAIE,QAAQ,CAACV,IAAI,EAAEL,IAAI,EAAE;QACvBc,MAAI,CAACtB,WAAW,CAACS,IAAI,CAACc,QAAQ,CAACV,IAAI,CAACL,IAAI,CAAC;;MAG3C,OAAOe,QAAQ;IAAC;EAClB;EAEA;EACaC,MAAMA,CAACJ,KAAa,EAAEC,QAAgB;IAAA,IAAAI,MAAA;IAAA,OAAAb,iBAAA;MACjD,MAAMW,QAAQ,SAASE,MAAI,CAACxB,QAAQ,CAACG,IAAI,CAACsB,kBAAkB,CAAC;QAC3DN,KAAK;QACLC;OACD,CAAC;MAEF,IAAIE,QAAQ,CAACV,IAAI,EAAEL,IAAI,EAAE;QACvBiB,MAAI,CAACzB,WAAW,CAACS,IAAI,CAACc,QAAQ,CAACV,IAAI,CAACL,IAAI,CAAC;;MAG3C,OAAOe,QAAQ;IAAC;EAClB;EAEA;EACaI,OAAOA,CAAA;IAAA,IAAAC,MAAA;IAAA,OAAAhB,iBAAA;MAClB,MAAM;QAAEiB;MAAK,CAAE,SAASD,MAAI,CAAC3B,QAAQ,CAACG,IAAI,CAACuB,OAAO,EAAE;MACpD,IAAI,CAACE,KAAK,EAAE;QACVD,MAAI,CAAC5B,WAAW,CAACS,IAAI,CAAC,IAAI,CAAC;;MAE7B,OAAO;QAAEoB;MAAK,CAAE;IAAC;EACnB;EAEA;EACaC,aAAaA,CAACV,KAAa;IAAA,IAAAW,MAAA;IAAA,OAAAnB,iBAAA;MACtC,OAAOmB,MAAI,CAAC9B,QAAQ,CAACG,IAAI,CAAC4B,qBAAqB,CAACZ,KAAK,CAAC;IAAC;EACzD;EAEA;EACOa,WAAWA,CAAA;IAChB,OAAO,IAAI,CAAChC,QAAQ;EACtB;EAEA;EACaiC,QAAQA,CAACC,EAAU;IAAA,IAAAC,MAAA;IAAA,OAAAxB,iBAAA;MAC9B,OAAOwB,MAAI,CAACnC,QAAQ,CACjBoC,IAAI,CAAC,QAAQ,CAAC,CACdC,MAAM,CAAC,GAAG,CAAC,CACXC,EAAE,CAAC,IAAI,EAAEJ,EAAE,CAAC,CACZK,MAAM,EAAE;IAAC;EACd;EAEaC,kBAAkBA,CAAA;IAAA,IAAAC,MAAA;IAAA,OAAA9B,iBAAA;MAC7B,MAAMJ,IAAI,GAAGkC,MAAI,CAACzB,mBAAmB,EAAE;MACvC,IAAI,CAACT,IAAI,EAAE,OAAO;QAAEK,IAAI,EAAE,IAAI;QAAEgB,KAAK,EAAE;MAAyB,CAAE;MAElE,OAAOa,MAAI,CAACzC,QAAQ,CACjBoC,IAAI,CAAC,QAAQ,CAAC,CACdC,MAAM,CAAC,GAAG,CAAC,CACXK,EAAE,CAAC,kBAAkBnC,IAAI,CAAC2B,EAAE,mBAAmB3B,IAAI,CAAC2B,EAAE,EAAE,CAAC;IAAC;EAC/D;EAEaS,UAAUA,CAACC,IAAY,EAAEC,aAAqB,EAAEC,cAAuB;IAAA,IAAAC,MAAA;IAAA,OAAApC,iBAAA;MAClF,MAAMJ,IAAI,GAAGwC,MAAI,CAAC/B,mBAAmB,EAAE;MACvC,IAAI,CAACT,IAAI,EAAE,OAAO;QAAEK,IAAI,EAAE,IAAI;QAAEgB,KAAK,EAAE;MAAyB,CAAE;MAElE,IAAIoB,WAAW,GAAG,IAAI;MACtB,IAAIF,cAAc,EAAE;QAClB,MAAM;UAAElC,IAAI,EAAEqC;QAAQ,CAAE,SAASF,MAAI,CAAC/C,QAAQ,CAC3CoC,IAAI,CAAC,UAAU,CAAC,CAChBC,MAAM,CAAC,IAAI,CAAC,CACZC,EAAE,CAAC,OAAO,EAAEQ,cAAc,CAAC,CAC3BP,MAAM,EAAE;QAEX,IAAIU,QAAQ,EAAE;UACZD,WAAW,GAAGC,QAAQ,CAACf,EAAE;;;MAI7B,OAAOa,MAAI,CAAC/C,QAAQ,CACjBoC,IAAI,CAAC,QAAQ,CAAC,CACdc,MAAM,CAAC;QACNN,IAAI;QACJC,aAAa;QACbM,WAAW,EAAEN,aAAa;QAC1BO,WAAW,EAAE7C,IAAI,CAAC2B,EAAE;QACpBc;OACD,CAAC,CACDX,MAAM,EAAE,CACRE,MAAM,EAAE;IAAC;EACd;EAEac,cAAcA,CAACnB,EAAU,EAAEoB,KAAU;IAAA,IAAAC,MAAA;IAAA,OAAA5C,iBAAA;MAChD,OAAO4C,MAAI,CAACvD,QAAQ,CACjBoC,IAAI,CAAC,QAAQ,CAAC,CACdoB,MAAM,CAACF,KAAK,CAAC,CACbhB,EAAE,CAAC,IAAI,EAAEJ,EAAE,CAAC;IAAC;EAClB;EAEauB,YAAYA,CAACvB,EAAU;IAAA,IAAAwB,MAAA;IAAA,OAAA/C,iBAAA;MAClC,OAAO+C,MAAI,CAAC1D,QAAQ,CACjBoC,IAAI,CAAC,QAAQ,CAAC,CACduB,MAAM,EAAE,CACRrB,EAAE,CAAC,IAAI,EAAEJ,EAAE,CAAC;IAAC;EAClB;EAEA;EACa0B,oBAAoBA,CAACC,OAAe,EAAEC,OAAa;IAAA,IAAAC,MAAA;IAAA,OAAApD,iBAAA;MAC9D,IAAIqD,KAAK,GAAGD,MAAI,CAAC/D,QAAQ,CACtBoC,IAAI,CAAC,YAAY,CAAC,CAClBC,MAAM,CAAC,GAAG,CAAC,CACXC,EAAE,CAAC,UAAU,EAAEuB,OAAO,CAAC;MAE1B;MACA,IAAIC,OAAO,EAAE;QACX,IAAIA,OAAO,CAACG,IAAI,EAAE;UAChBD,KAAK,GAAGA,KAAK,CAAC1B,EAAE,CAAC,MAAM,EAAEwB,OAAO,CAACG,IAAI,CAAC;;QAExC,IAAIH,OAAO,CAACI,SAAS,EAAE;UACrBF,KAAK,GAAGA,KAAK,CAAC1B,EAAE,CAAC,WAAW,EAAEwB,OAAO,CAACI,SAAS,CAAC;;QAElD,IAAIJ,OAAO,CAACK,UAAU,EAAE;UACtBH,KAAK,GAAGA,KAAK,CAACI,GAAG,CAAC,MAAM,EAAEN,OAAO,CAACK,UAAU,CAAC;;QAE/C,IAAIL,OAAO,CAACO,OAAO,EAAE;UACnBL,KAAK,GAAGA,KAAK,CAACM,GAAG,CAAC,MAAM,EAAER,OAAO,CAACO,OAAO,CAAC;;;MAI9C;MACAL,KAAK,GAAGA,KAAK,CAACO,KAAK,CAAC,MAAM,EAAE;QAAEC,SAAS,EAAE;MAAK,CAAE,CAAC;MAEjD,OAAOR,KAAK;IAAC;EACf;EAEaS,cAAcA,CAACnB,KAAU;IAAA,IAAAoB,OAAA;IAAA,OAAA/D,iBAAA;MACpC,OAAO+D,OAAI,CAAC1E,QAAQ,CACjBoC,IAAI,CAAC,YAAY,CAAC,CAClBc,MAAM,CAACI,KAAK,CAAC,CACbjB,MAAM,EAAE,CACRE,MAAM,EAAE;IAAC;EACd;EAEaoC,kBAAkBA,CAACzC,EAAU,EAAEoB,KAAU;IAAA,IAAAsB,OAAA;IAAA,OAAAjE,iBAAA;MACpD,OAAOiE,OAAI,CAAC5E,QAAQ,CACjBoC,IAAI,CAAC,YAAY,CAAC,CAClBoB,MAAM,CAACF,KAAK,CAAC,CACbhB,EAAE,CAAC,IAAI,EAAEJ,EAAE,CAAC;IAAC;EAClB;EAEa2C,gBAAgBA,CAAC3C,EAAU;IAAA,IAAA4C,OAAA;IAAA,OAAAnE,iBAAA;MACtC,OAAOmE,OAAI,CAAC9E,QAAQ,CACjBoC,IAAI,CAAC,YAAY,CAAC,CAClBuB,MAAM,EAAE,CACRrB,EAAE,CAAC,IAAI,EAAEJ,EAAE,CAAC;IAAC;EAClB;EAEA;EACa6C,aAAaA,CAAA;IAAA,IAAAC,OAAA;IAAA,OAAArE,iBAAA;MACxB,OAAOqE,OAAI,CAAChF,QAAQ,CACjBoC,IAAI,CAAC,YAAY,CAAC,CAClBC,MAAM,CAAC,WAAW,CAAC,CACnBkC,KAAK,CAAC,WAAW,CAAC;IAAC;EACxB;EAEA;EACaU,qBAAqBA,CAACpB,OAAe,EAAEqB,OAAyC;IAAA,IAAAC,OAAA;IAAA,OAAAxE,iBAAA;MAC3F,IAAIqD,KAAK,GAAGmB,OAAI,CAACnF,QAAQ,CAACoF,GAAG,CAAC,sBAAsB,EAAE;QACpDC,UAAU,EAAExB;OACb,CAAC;MAEF,IAAIqB,OAAO,EAAE;QACXlB,KAAK,GAAGA,KAAK,CAAC1B,EAAE,CAAC,eAAe,EAAE4C,OAAO,CAACI,MAAM,CAAC,CAAChD,EAAE,CAAC,YAAY,EAAE4C,OAAO,CAACK,GAAG,CAAC;;MAGjF,OAAOvB,KAAK;IAAC;EACf;EAEA;EACMwB,iBAAiBA,CAACC,OAA4C;IAAA,IAAAC,OAAA;IAAA,OAAA/E,iBAAA;MAClE,MAAMJ,IAAI,SAASmF,OAAI,CAAC1E,mBAAmB,EAAE;MAC7C,IAAI,CAACT,IAAI,EAAE,MAAM,IAAIoF,KAAK,CAAC,yBAAyB,CAAC;MAErD,OAAOD,OAAI,CAAC1F,QAAQ,CACjBoC,IAAI,CAAC,QAAQ,CAAC,CACdwD,MAAM,CAAC;QACN1D,EAAE,EAAE3B,IAAI,CAAC2B,EAAE;QACXU,IAAI,EAAE6C,OAAO,CAAC7C,IAAI;QAClBiD,SAAS,EAAEJ,OAAO,CAACI,SAAS;QAC5BC,UAAU,EAAE,IAAIC,IAAI;OACrB,CAAC;IAAC;EACP;EAEMC,cAAcA,CAAA;IAAA,IAAAC,OAAA;IAAA,OAAAtF,iBAAA;MAClB,MAAMJ,IAAI,SAAS0F,OAAI,CAACjF,mBAAmB,EAAE;MAC7C,IAAI,CAACT,IAAI,EAAE,MAAM,IAAIoF,KAAK,CAAC,yBAAyB,CAAC;MAErD,OAAOM,OAAI,CAACjG,QAAQ,CACjBoC,IAAI,CAAC,QAAQ,CAAC,CACdC,MAAM,CAAC,GAAG,CAAC,CACXC,EAAE,CAAC,IAAI,EAAE/B,IAAI,CAAC2B,EAAE,CAAC,CACjBK,MAAM,EAAE;IAAC;EACd;EAEA;EACM2D,SAASA,CAAA;IAAA,IAAAC,OAAA;IAAA,OAAAxF,iBAAA;MACb,MAAMJ,IAAI,SAAS4F,OAAI,CAACnF,mBAAmB,EAAE;MAC7C,IAAI,CAACT,IAAI,EAAE,MAAM,IAAIoF,KAAK,CAAC,yBAAyB,CAAC;MAErD,OAAOQ,OAAI,CAACnG,QAAQ,CACjBoC,IAAI,CAAC,QAAQ,CAAC,CACdC,MAAM,CAAC,GAAG,CAAC,CACXC,EAAE,CAAC,YAAY,EAAE/B,IAAI,CAAC2B,EAAE,CAAC,CACzBqC,KAAK,CAAC,MAAM,CAAC;IAAC;EACnB;EAEM5B,UAAUA,CAACyD,KAAoD;IAAA,IAAAC,OAAA;IAAA,OAAA1F,iBAAA;MACnE,MAAMJ,IAAI,SAAS8F,OAAI,CAACrF,mBAAmB,EAAE;MAC7C,IAAI,CAACT,IAAI,EAAE,MAAM,IAAIoF,KAAK,CAAC,yBAAyB,CAAC;MAErD,OAAOU,OAAI,CAACrG,QAAQ,CACjBoC,IAAI,CAAC,QAAQ,CAAC,CACdc,MAAM,CAAC;QACN,GAAGkD,KAAK;QACRE,UAAU,EAAE/F,IAAI,CAAC2B,EAAE;QACnBqE,UAAU,EAAE,IAAIR,IAAI;OACrB,CAAC;IAAC;EACP;EAEM1C,cAAcA,CAACnB,EAAU,EAAEkE,KAAoD;IAAA,IAAAI,OAAA;IAAA,OAAA7F,iBAAA;MACnF,MAAMJ,IAAI,SAASiG,OAAI,CAACxF,mBAAmB,EAAE;MAC7C,IAAI,CAACT,IAAI,EAAE,MAAM,IAAIoF,KAAK,CAAC,yBAAyB,CAAC;MAErD,OAAOa,OAAI,CAACxG,QAAQ,CACjBoC,IAAI,CAAC,QAAQ,CAAC,CACdoB,MAAM,CAAC;QACN,GAAG4C,KAAK;QACRN,UAAU,EAAE,IAAIC,IAAI;OACrB,CAAC,CACDzD,EAAE,CAAC,IAAI,EAAEJ,EAAE,CAAC,CACZI,EAAE,CAAC,YAAY,EAAE/B,IAAI,CAAC2B,EAAE,CAAC;IAAC;EAC/B;EAEMuB,YAAYA,CAACvB,EAAU;IAAA,IAAAuE,OAAA;IAAA,OAAA9F,iBAAA;MAC3B,MAAMJ,IAAI,SAASkG,OAAI,CAACzF,mBAAmB,EAAE;MAC7C,IAAI,CAACT,IAAI,EAAE,MAAM,IAAIoF,KAAK,CAAC,yBAAyB,CAAC;MAErD,OAAOc,OAAI,CAACzG,QAAQ,CACjBoC,IAAI,CAAC,QAAQ,CAAC,CACduB,MAAM,EAAE,CACRrB,EAAE,CAAC,IAAI,EAAEJ,EAAE,CAAC,CACZI,EAAE,CAAC,YAAY,EAAE/B,IAAI,CAAC2B,EAAE,CAAC;IAAC;EAC/B;EAEA;EACMwE,aAAaA,CAAA;IAAA,IAAAC,OAAA;IAAA,OAAAhG,iBAAA;MACjB,MAAMJ,IAAI,SAASoG,OAAI,CAAC3F,mBAAmB,EAAE;MAC7C,IAAI,CAACT,IAAI,EAAE,MAAM,IAAIoF,KAAK,CAAC,yBAAyB,CAAC;MAErD,OAAOgB,OAAI,CAAC3G,QAAQ,CACjBoC,IAAI,CAAC,YAAY,CAAC,CAClBC,MAAM,CAAC;;;OAGP,CAAC,CACDC,EAAE,CAAC,YAAY,EAAE/B,IAAI,CAAC2B,EAAE,CAAC,CACzBqC,KAAK,CAAC,MAAM,EAAE;QAAEC,SAAS,EAAE;MAAK,CAAE,CAAC;IAAC;EACzC;EAEMC,cAAcA,CAACmC,SAOpB;IAAA,IAAAC,OAAA;IAAA,OAAAlG,iBAAA;MACC,MAAMJ,IAAI,SAASsG,OAAI,CAAC7F,mBAAmB,EAAE;MAC7C,IAAI,CAACT,IAAI,EAAE,MAAM,IAAIoF,KAAK,CAAC,yBAAyB,CAAC;MAErD,OAAOkB,OAAI,CAAC7G,QAAQ,CACjBoC,IAAI,CAAC,YAAY,CAAC,CAClBc,MAAM,CAAC;QACN,GAAG0D,SAAS;QACZN,UAAU,EAAE/F,IAAI,CAAC2B,EAAE;QACnBqE,UAAU,EAAE,IAAIR,IAAI;OACrB,CAAC;IAAC;EACP;EAEMpB,kBAAkBA,CACtBzC,EAAU,EACV0E,SAOC;IAAA,IAAAE,OAAA;IAAA,OAAAnG,iBAAA;MAED,MAAMJ,IAAI,SAASuG,OAAI,CAAC9F,mBAAmB,EAAE;MAC7C,IAAI,CAACT,IAAI,EAAE,MAAM,IAAIoF,KAAK,CAAC,yBAAyB,CAAC;MAErD,OAAOmB,OAAI,CAAC9G,QAAQ,CACjBoC,IAAI,CAAC,YAAY,CAAC,CAClBoB,MAAM,CAAC;QACN,GAAGoD,SAAS;QACZd,UAAU,EAAE,IAAIC,IAAI;OACrB,CAAC,CACDzD,EAAE,CAAC,IAAI,EAAEJ,EAAE,CAAC,CACZI,EAAE,CAAC,YAAY,EAAE/B,IAAI,CAAC2B,EAAE,CAAC;IAAC;EAC/B;EAEM2C,gBAAgBA,CAAC3C,EAAU;IAAA,IAAA6E,OAAA;IAAA,OAAApG,iBAAA;MAC/B,MAAMJ,IAAI,SAASwG,OAAI,CAAC/F,mBAAmB,EAAE;MAC7C,IAAI,CAACT,IAAI,EAAE,MAAM,IAAIoF,KAAK,CAAC,yBAAyB,CAAC;MAErD,OAAOoB,OAAI,CAAC/G,QAAQ,CACjBoC,IAAI,CAAC,YAAY,CAAC,CAClBuB,MAAM,EAAE,CACRrB,EAAE,CAAC,IAAI,EAAEJ,EAAE,CAAC,CACZI,EAAE,CAAC,YAAY,EAAE/B,IAAI,CAAC2B,EAAE,CAAC;IAAC;EAC/B;;;uBA5WWrC,eAAe;IAAA;EAAA;;;aAAfA,eAAe;MAAAmH,OAAA,EAAfnH,eAAe,CAAAoH,IAAA;MAAAC,UAAA,EAFd;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}