{"ast":null,"code":"import { from, throwError } from 'rxjs';\nimport { map, catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./supabase.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/material/snack-bar\";\nexport class AuthService {\n  constructor(supabaseService, router, snackBar) {\n    this.supabaseService = supabaseService;\n    this.router = router;\n    this.snackBar = snackBar;\n  }\n  /**\n   * Realiza o login do usuário\n   * @param credentials Dados de autenticação (email e senha)\n   * @returns Observable com o usuário logado\n   */\n  login(credentials) {\n    return from(this.supabaseService.signIn(credentials.email, credentials.senha)).pipe(map(response => {\n      if (response.error) {\n        throw new Error(response.error.message);\n      }\n      this.snackBar.open('Login realizado com sucesso!', 'Fechar', {\n        duration: 3000\n      });\n      return response.data;\n    }), catchError(error => {\n      this.snackBar.open(error.message || 'Erro ao fazer login', 'Fechar', {\n        duration: 3000\n      });\n      throw error;\n    }));\n  }\n  /**\n   * Registra um novo usuário\n   * @param dados Dados de registro (email, senha, nome, sobrenome)\n   * @returns Observable com o usuário registrado\n   */\n  registrar(userData) {\n    return from(this.supabaseService.signUp(userData.email, userData.senha)).pipe(map(response => {\n      if (response.error) {\n        throw new Error(response.error.message);\n      }\n      // Atualizar o perfil do usuário com nome e sobrenome\n      return this.updateUserProfile(userData.nome, userData.sobrenome);\n    }), catchError(error => {\n      this.snackBar.open(error.message || 'Erro ao criar conta', 'Fechar', {\n        duration: 3000\n      });\n      throw error;\n    }));\n  }\n  updateUserProfile(nome, sobrenome) {\n    return from(this.supabaseService.updateUserProfile({\n      nome,\n      sobrenome\n    })).pipe(map(response => {\n      if (response.error) {\n        throw new Error(response.error.message);\n      }\n      this.snackBar.open('Conta criada com sucesso!', 'Fechar', {\n        duration: 3000\n      });\n      return response.data;\n    }), catchError(error => {\n      this.snackBar.open(error.message || 'Erro ao atualizar perfil', 'Fechar', {\n        duration: 3000\n      });\n      throw error;\n    }));\n  }\n  /**\n   * Recupera a senha do usuário\n   * @param email Email do usuário\n   * @returns Observable com o status da operação\n   */\n  recuperarSenha(email) {\n    return from(this.supabaseService.resetPassword(email)).pipe(map(({\n      data,\n      error\n    }) => {\n      if (error) {\n        throw new Error(error.message);\n      }\n      return true;\n    }), tap(() => {\n      this.snackBar.open('Email enviado com instruções para recuperação de senha.', 'Fechar', {\n        duration: 5000\n      });\n    }), catchError(erro => {\n      console.error('Erro na recuperação de senha:', erro);\n      this.snackBar.open(`Erro ao enviar email: ${erro.message}`, 'Fechar', {\n        duration: 5000\n      });\n      return throwError(() => erro);\n    }));\n  }\n  /**\n   * Realiza o logout do usuário\n   * @returns Observable com o status da operação\n   */\n  logout() {\n    this.supabaseService.signOut().then(() => {\n      this.router.navigate(['/login']);\n      this.snackBar.open('Logout realizado com sucesso!', 'Fechar', {\n        duration: 3000\n      });\n    }).catch(error => {\n      this.snackBar.open(error.message || 'Erro ao fazer logout', 'Fechar', {\n        duration: 3000\n      });\n    });\n  }\n  /**\n   * Verifica se o usuário está autenticado\n   * @returns Observable com status booleano de autenticação\n   */\n  estaAutenticado() {\n    return !!this.supabaseService.getCurrentUserValue();\n  }\n  /**\n   * Obtém os dados do usuário atual\n   * @returns Observable com o usuário atual\n   */\n  getUsuarioAtual() {\n    return this.supabaseService.getCurrentUser();\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.SupabaseService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.MatSnackBar));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["from","throwError","map","catchError","tap","AuthService","constructor","supabaseService","router","snackBar","login","credentials","signIn","email","senha","pipe","response","error","Error","message","open","duration","data","registrar","userData","signUp","updateUserProfile","nome","sobrenome","recuperarSenha","resetPassword","erro","console","logout","signOut","then","navigate","catch","estaAutenticado","getCurrentUserValue","getUsuarioAtual","getCurrentUser","i0","ɵɵinject","i1","SupabaseService","i2","Router","i3","MatSnackBar","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Bomfim\\Documents\\GitHub\\Controle-financeiro-casal\\workspace\\sistema-financeiro-casal-frontend\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Observable, from, throwError, of } from 'rxjs';\nimport { map, catchError, tap } from 'rxjs/operators';\nimport { SupabaseService } from './supabase.service';\nimport { DadosAutenticacao, DadosRegistro, Usuario } from '../models/usuario.model';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  \n  constructor(\n    private supabaseService: SupabaseService,\n    private router: Router,\n    private snackBar: MatSnackBar\n  ) { }\n\n  /**\n   * Realiza o login do usuário\n   * @param credentials Dados de autenticação (email e senha)\n   * @returns Observable com o usuário logado\n   */\n  login(credentials: { email: string; senha: string }): Observable<any> {\n    return from(this.supabaseService.signIn(credentials.email, credentials.senha)).pipe(\n      map(response => {\n        if (response.error) {\n          throw new Error(response.error.message);\n        }\n        this.snackBar.open('Login realizado com sucesso!', 'Fechar', {\n          duration: 3000\n        });\n        return response.data;\n      }),\n      catchError(error => {\n        this.snackBar.open(error.message || 'Erro ao fazer login', 'Fechar', {\n          duration: 3000\n        });\n        throw error;\n      })\n    );\n  }\n\n  /**\n   * Registra um novo usuário\n   * @param dados Dados de registro (email, senha, nome, sobrenome)\n   * @returns Observable com o usuário registrado\n   */\n  registrar(userData: { nome: string; sobrenome: string; email: string; senha: string }): Observable<any> {\n    return from(this.supabaseService.signUp(userData.email, userData.senha)).pipe(\n      map(response => {\n        if (response.error) {\n          throw new Error(response.error.message);\n        }\n        // Atualizar o perfil do usuário com nome e sobrenome\n        return this.updateUserProfile(userData.nome, userData.sobrenome);\n      }),\n      catchError(error => {\n        this.snackBar.open(error.message || 'Erro ao criar conta', 'Fechar', {\n          duration: 3000\n        });\n        throw error;\n      })\n    );\n  }\n\n  private updateUserProfile(nome: string, sobrenome: string): Observable<any> {\n    return from(this.supabaseService.updateUserProfile({ nome, sobrenome })).pipe(\n      map(response => {\n        if (response.error) {\n          throw new Error(response.error.message);\n        }\n        this.snackBar.open('Conta criada com sucesso!', 'Fechar', {\n          duration: 3000\n        });\n        return response.data;\n      }),\n      catchError(error => {\n        this.snackBar.open(error.message || 'Erro ao atualizar perfil', 'Fechar', {\n          duration: 3000\n        });\n        throw error;\n      })\n    );\n  }\n\n  /**\n   * Recupera a senha do usuário\n   * @param email Email do usuário\n   * @returns Observable com o status da operação\n   */\n  recuperarSenha(email: string): Observable<boolean> {\n    return from(this.supabaseService.resetPassword(email)).pipe(\n      map(({ data, error }) => {\n        if (error) {\n          throw new Error(error.message);\n        }\n        return true;\n      }),\n      tap(() => {\n        this.snackBar.open('Email enviado com instruções para recuperação de senha.', 'Fechar', {\n          duration: 5000\n        });\n      }),\n      catchError(erro => {\n        console.error('Erro na recuperação de senha:', erro);\n        this.snackBar.open(`Erro ao enviar email: ${erro.message}`, 'Fechar', {\n          duration: 5000\n        });\n        return throwError(() => erro);\n      })\n    );\n  }\n\n  /**\n   * Realiza o logout do usuário\n   * @returns Observable com o status da operação\n   */\n  logout(): void {\n    this.supabaseService.signOut().then(() => {\n      this.router.navigate(['/login']);\n      this.snackBar.open('Logout realizado com sucesso!', 'Fechar', {\n        duration: 3000\n      });\n    }).catch(error => {\n      this.snackBar.open(error.message || 'Erro ao fazer logout', 'Fechar', {\n        duration: 3000\n      });\n    });\n  }\n\n  /**\n   * Verifica se o usuário está autenticado\n   * @returns Observable com status booleano de autenticação\n   */\n  estaAutenticado(): boolean {\n    return !!this.supabaseService.getCurrentUserValue();\n  }\n\n  /**\n   * Obtém os dados do usuário atual\n   * @returns Observable com o usuário atual\n   */\n  getUsuarioAtual(): Observable<Usuario | null> {\n    return this.supabaseService.getCurrentUser() as Observable<Usuario | null>;\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}