{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/material/dialog\";\nimport * as i3 from \"../../../services/supabase.service\";\nimport * as i4 from \"@angular/material/snack-bar\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/material/button\";\nimport * as i7 from \"@angular/material/form-field\";\nimport * as i8 from \"@angular/material/input\";\nimport * as i9 from \"@angular/material/select\";\nimport * as i10 from \"@angular/material/core\";\nfunction NovaContaDialogComponent_mat_error_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Nome \\u00E9 obrigat\\u00F3rio \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction NovaContaDialogComponent_mat_error_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Tipo \\u00E9 obrigat\\u00F3rio \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction NovaContaDialogComponent_mat_error_28_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Saldo \\u00E9 obrigat\\u00F3rio \");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class NovaContaDialogComponent {\n  constructor(fb, dialogRef, supabaseService, snackBar) {\n    this.fb = fb;\n    this.dialogRef = dialogRef;\n    this.supabaseService = supabaseService;\n    this.snackBar = snackBar;\n    this.form = this.fb.group({\n      nome: ['', Validators.required],\n      tipo: ['', Validators.required],\n      saldo: [0, Validators.required]\n    });\n  }\n  onSubmit() {\n    if (this.form.valid) {\n      this.supabaseService.criarConta(this.form.value).subscribe({\n        next: () => {\n          this.snackBar.open('Conta criada com sucesso!', 'Fechar', {\n            duration: 3000\n          });\n          this.dialogRef.close(true);\n        },\n        error: error => {\n          this.snackBar.open('Erro ao criar conta', 'Fechar', {\n            duration: 3000\n          });\n        }\n      });\n    }\n  }\n  onCancel() {\n    this.dialogRef.close();\n  }\n  static {\n    this.ɵfac = function NovaContaDialogComponent_Factory(t) {\n      return new (t || NovaContaDialogComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.MatDialogRef), i0.ɵɵdirectiveInject(i3.SupabaseService), i0.ɵɵdirectiveInject(i4.MatSnackBar));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: NovaContaDialogComponent,\n      selectors: [[\"app-nova-conta-dialog\"]],\n      decls: 34,\n      vars: 5,\n      consts: [[\"mat-dialog-title\", \"\"], [3, \"formGroup\", \"ngSubmit\"], [\"appearance\", \"fill\", 1, \"full-width\"], [\"matInput\", \"\", \"formControlName\", \"nome\", \"required\", \"\"], [4, \"ngIf\"], [\"formControlName\", \"tipo\", \"required\", \"\"], [\"value\", \"corrente\"], [\"value\", \"poupanca\"], [\"value\", \"carteira\"], [\"value\", \"investimento\"], [\"value\", \"outro\"], [\"matInput\", \"\", \"type\", \"number\", \"formControlName\", \"saldo\", \"required\", \"\"], [\"align\", \"end\"], [\"mat-button\", \"\", \"type\", \"button\", 3, \"click\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"submit\", 3, \"disabled\"]],\n      template: function NovaContaDialogComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"h2\", 0);\n          i0.ɵɵtext(1, \"Nova Conta\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(2, \"form\", 1);\n          i0.ɵɵlistener(\"ngSubmit\", function NovaContaDialogComponent_Template_form_ngSubmit_2_listener() {\n            return ctx.onSubmit();\n          });\n          i0.ɵɵelementStart(3, \"mat-dialog-content\")(4, \"mat-form-field\", 2)(5, \"mat-label\");\n          i0.ɵɵtext(6, \"Nome da Conta\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(7, \"input\", 3);\n          i0.ɵɵtemplate(8, NovaContaDialogComponent_mat_error_8_Template, 2, 0, \"mat-error\", 4);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(9, \"mat-form-field\", 2)(10, \"mat-label\");\n          i0.ɵɵtext(11, \"Tipo de Conta\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(12, \"mat-select\", 5)(13, \"mat-option\", 6);\n          i0.ɵɵtext(14, \"Conta Corrente\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(15, \"mat-option\", 7);\n          i0.ɵɵtext(16, \"Conta Poupan\\u00E7a\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(17, \"mat-option\", 8);\n          i0.ɵɵtext(18, \"Carteira\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(19, \"mat-option\", 9);\n          i0.ɵɵtext(20, \"Investimento\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(21, \"mat-option\", 10);\n          i0.ɵɵtext(22, \"Outro\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(23, NovaContaDialogComponent_mat_error_23_Template, 2, 0, \"mat-error\", 4);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(24, \"mat-form-field\", 2)(25, \"mat-label\");\n          i0.ɵɵtext(26, \"Saldo Inicial\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(27, \"input\", 11);\n          i0.ɵɵtemplate(28, NovaContaDialogComponent_mat_error_28_Template, 2, 0, \"mat-error\", 4);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(29, \"mat-dialog-actions\", 12)(30, \"button\", 13);\n          i0.ɵɵlistener(\"click\", function NovaContaDialogComponent_Template_button_click_30_listener() {\n            return ctx.onCancel();\n          });\n          i0.ɵɵtext(31, \"Cancelar\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(32, \"button\", 14);\n          i0.ɵɵtext(33, \" Salvar \");\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          let tmp_1_0;\n          let tmp_2_0;\n          let tmp_3_0;\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"formGroup\", ctx.form);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = ctx.form.get(\"nome\")) == null ? null : tmp_1_0.hasError(\"required\"));\n          i0.ɵɵadvance(15);\n          i0.ɵɵproperty(\"ngIf\", (tmp_2_0 = ctx.form.get(\"tipo\")) == null ? null : tmp_2_0.hasError(\"required\"));\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngIf\", (tmp_3_0 = ctx.form.get(\"saldo\")) == null ? null : tmp_3_0.hasError(\"required\"));\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"disabled\", ctx.form.invalid);\n        }\n      },\n      dependencies: [i5.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i1.FormGroupDirective, i1.FormControlName, i6.MatButton, i2.MatDialogTitle, i2.MatDialogContent, i2.MatDialogActions, i7.MatFormField, i7.MatLabel, i7.MatError, i8.MatInput, i9.MatSelect, i10.MatOption],\n      styles: [\".full-width[_ngcontent-%COMP%] {\\n  width: 100%;\\n  margin-bottom: 15px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9jb250YXMvbm92YS1jb250YS1kaWFsb2cvbm92YS1jb250YS1kaWFsb2cuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNJO0VBQ0UsV0FBQTtFQUNBLG1CQUFBO0FBQU4iLCJzb3VyY2VzQ29udGVudCI6WyJcbiAgICAuZnVsbC13aWR0aCB7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIG1hcmdpbi1ib3R0b206IDE1cHg7XG4gICAgfVxuICAiXSwic291cmNlUm9vdCI6IiJ9 */\"]\n    });\n  }\n}","map":{"version":3,"names":["Validators","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","NovaContaDialogComponent","constructor","fb","dialogRef","supabaseService","snackBar","form","group","nome","required","tipo","saldo","onSubmit","valid","criarConta","value","subscribe","next","open","duration","close","error","onCancel","ɵɵdirectiveInject","i1","FormBuilder","i2","MatDialogRef","i3","SupabaseService","i4","MatSnackBar","selectors","decls","vars","consts","template","NovaContaDialogComponent_Template","rf","ctx","ɵɵlistener","NovaContaDialogComponent_Template_form_ngSubmit_2_listener","ɵɵelement","ɵɵtemplate","NovaContaDialogComponent_mat_error_8_Template","NovaContaDialogComponent_mat_error_23_Template","NovaContaDialogComponent_mat_error_28_Template","NovaContaDialogComponent_Template_button_click_30_listener","ɵɵadvance","ɵɵproperty","tmp_1_0","get","hasError","tmp_2_0","tmp_3_0","invalid"],"sources":["C:\\Users\\Bomfim\\Documents\\GitHub\\Controle-financeiro-casal\\workspace\\sistema-financeiro-casal-frontend\\src\\app\\components\\contas\\nova-conta-dialog\\nova-conta-dialog.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { SupabaseService } from '../../../services/supabase.service';\r\n\r\n@Component({\r\n  selector: 'app-nova-conta-dialog',\r\n  template: `\r\n    <h2 mat-dialog-title>Nova Conta</h2>\r\n    <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n      <mat-dialog-content>\r\n        <mat-form-field appearance=\"fill\" class=\"full-width\">\r\n          <mat-label>Nome da Conta</mat-label>\r\n          <input matInput formControlName=\"nome\" required>\r\n          <mat-error *ngIf=\"form.get('nome')?.hasError('required')\">\r\n            Nome é obrigatório\r\n          </mat-error>\r\n        </mat-form-field>\r\n\r\n        <mat-form-field appearance=\"fill\" class=\"full-width\">\r\n          <mat-label>Tipo de Conta</mat-label>\r\n          <mat-select formControlName=\"tipo\" required>\r\n            <mat-option value=\"corrente\">Conta Corrente</mat-option>\r\n            <mat-option value=\"poupanca\">Conta Poupança</mat-option>\r\n            <mat-option value=\"carteira\">Carteira</mat-option>\r\n            <mat-option value=\"investimento\">Investimento</mat-option>\r\n            <mat-option value=\"outro\">Outro</mat-option>\r\n          </mat-select>\r\n          <mat-error *ngIf=\"form.get('tipo')?.hasError('required')\">\r\n            Tipo é obrigatório\r\n          </mat-error>\r\n        </mat-form-field>\r\n\r\n        <mat-form-field appearance=\"fill\" class=\"full-width\">\r\n          <mat-label>Saldo Inicial</mat-label>\r\n          <input matInput type=\"number\" formControlName=\"saldo\" required>\r\n          <mat-error *ngIf=\"form.get('saldo')?.hasError('required')\">\r\n            Saldo é obrigatório\r\n          </mat-error>\r\n        </mat-form-field>\r\n      </mat-dialog-content>\r\n\r\n      <mat-dialog-actions align=\"end\">\r\n        <button mat-button type=\"button\" (click)=\"onCancel()\">Cancelar</button>\r\n        <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"form.invalid\">\r\n          Salvar\r\n        </button>\r\n      </mat-dialog-actions>\r\n    </form>\r\n  `,\r\n  styles: [`\r\n    .full-width {\r\n      width: 100%;\r\n      margin-bottom: 15px;\r\n    }\r\n  `]\r\n})\r\nexport class NovaContaDialogComponent {\r\n  form: FormGroup;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private dialogRef: MatDialogRef<NovaContaDialogComponent>,\r\n    private supabaseService: SupabaseService,\r\n    private snackBar: MatSnackBar\r\n  ) {\r\n    this.form = this.fb.group({\r\n      nome: ['', Validators.required],\r\n      tipo: ['', Validators.required],\r\n      saldo: [0, Validators.required]\r\n    });\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.form.valid) {\r\n      this.supabaseService.criarConta(this.form.value).subscribe({\r\n        next: () => {\r\n          this.snackBar.open('Conta criada com sucesso!', 'Fechar', {\r\n            duration: 3000\r\n          });\r\n          this.dialogRef.close(true);\r\n        },\r\n        error: (error) => {\r\n          this.snackBar.open('Erro ao criar conta', 'Fechar', {\r\n            duration: 3000\r\n          });\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  onCancel() {\r\n    this.dialogRef.close();\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}