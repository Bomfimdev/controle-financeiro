{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Bomfim/Documents/GitHub/Controle-financeiro-casal/workspace/sistema-financeiro-casal-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { createClient } from '@supabase/supabase-js';\nimport { BehaviorSubject } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nexport class SupabaseService {\n  constructor() {\n    this.currentUser = new BehaviorSubject(null);\n    this.supabase = createClient(environment.supabaseUrl, environment.supabaseKey);\n    // Verificar se o usuário já está autenticado\n    this.supabase.auth.onAuthStateChange((event, session) => {\n      if (session?.user) {\n        this.currentUser.next(session.user);\n      } else {\n        this.currentUser.next(null);\n      }\n    });\n    // Carregar usuário inicial\n    this.loadUser();\n  }\n  loadUser() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const {\n        data\n      } = yield _this.supabase.auth.getUser();\n      _this.currentUser.next(data.user);\n    })();\n  }\n  // Retorna o usuário atual como um Observable\n  getCurrentUser() {\n    return this.currentUser.asObservable();\n  }\n  // Retorna o usuário atual diretamente\n  getCurrentUserValue() {\n    return this.currentUser.value;\n  }\n  // Autenticação\n  signIn(email, password) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const response = yield _this2.supabase.auth.signInWithPassword({\n        email,\n        password\n      });\n      if (response.data?.user) {\n        _this2.currentUser.next(response.data.user);\n      }\n      return response;\n    })();\n  }\n  signUp(email, password) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const response = yield _this3.supabase.auth.signUp({\n        email,\n        password\n      });\n      if (response.data?.user) {\n        _this3.currentUser.next(response.data.user);\n      }\n      return response;\n    })();\n  }\n  signOut() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        error\n      } = yield _this4.supabase.auth.signOut();\n      if (!error) {\n        _this4.currentUser.next(null);\n      }\n      return {\n        error\n      };\n    })();\n  }\n  // Recuperação de senha\n  resetPassword(email) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      return _this5.supabase.auth.resetPasswordForEmail(email);\n    })();\n  }\n  // Perfil do usuário\n  updateUserProfile(profile) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      const user = yield _this6.getCurrentUserValue();\n      if (!user) throw new Error('Usuário não autenticado');\n      return _this6.supabase.from('perfis').upsert({\n        id: user.id,\n        nome: profile.nome,\n        sobrenome: profile.sobrenome,\n        updated_at: new Date()\n      });\n    })();\n  }\n  getUserProfile() {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      const user = yield _this7.getCurrentUserValue();\n      if (!user) throw new Error('Usuário não autenticado');\n      return _this7.supabase.from('perfis').select('*').eq('id', user.id).single();\n    })();\n  }\n  // Contas\n  getContas() {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      const user = yield _this8.getCurrentUserValue();\n      if (!user) throw new Error('Usuário não autenticado');\n      return _this8.supabase.from('contas').select('*').or(`usuario1_id.eq.${user.id},usuario2_id.eq.${user.id}`).order('nome');\n    })();\n  }\n  criarConta(conta) {\n    var _this9 = this;\n    return _asyncToGenerator(function* () {\n      const user = yield _this9.getCurrentUserValue();\n      if (!user) throw new Error('Usuário não autenticado');\n      let usuario2_id = null;\n      if (conta.usuario2_email) {\n        const {\n          data: usuario2\n        } = yield _this9.supabase.from('usuarios').select('id').eq('email', conta.usuario2_email).single();\n        if (usuario2) {\n          usuario2_id = usuario2.id;\n        }\n      }\n      return _this9.supabase.from('contas').insert({\n        nome: conta.nome,\n        saldo_inicial: conta.saldo_inicial,\n        saldo_atual: conta.saldo_inicial,\n        usuario1_id: user.id,\n        usuario2_id\n      }).select().single();\n    })();\n  }\n  atualizarConta(id, conta) {\n    var _this0 = this;\n    return _asyncToGenerator(function* () {\n      const user = yield _this0.getCurrentUserValue();\n      if (!user) throw new Error('Usuário não autenticado');\n      let usuario2_id = null;\n      if (conta.usuario2_email) {\n        const {\n          data: usuario2\n        } = yield _this0.supabase.from('usuarios').select('id').eq('email', conta.usuario2_email).single();\n        if (usuario2) {\n          usuario2_id = usuario2.id;\n        }\n      }\n      return _this0.supabase.from('contas').update({\n        nome: conta.nome,\n        saldo_inicial: conta.saldo_inicial,\n        usuario2_id,\n        updated_at: new Date()\n      }).eq('id', id).or(`usuario1_id.eq.${user.id},usuario2_id.eq.${user.id}`);\n    })();\n  }\n  excluirConta(id) {\n    var _this1 = this;\n    return _asyncToGenerator(function* () {\n      const user = yield _this1.getCurrentUserValue();\n      if (!user) throw new Error('Usuário não autenticado');\n      return _this1.supabase.from('contas').delete().eq('id', id).or(`usuario1_id.eq.${user.id},usuario2_id.eq.${user.id}`);\n    })();\n  }\n  // Transações\n  getTransacoes(contaId) {\n    var _this10 = this;\n    return _asyncToGenerator(function* () {\n      const user = yield _this10.getCurrentUserValue();\n      if (!user) throw new Error('Usuário não autenticado');\n      let query = _this10.supabase.from('transacoes').select(`\n        *,\n        conta:contas(nome)\n      `).eq('usuario_id', user.id);\n      if (contaId) {\n        query = query.eq('conta_id', contaId);\n      }\n      return query.order('data', {\n        ascending: false\n      });\n    })();\n  }\n  criarTransacao(transacao) {\n    var _this11 = this;\n    return _asyncToGenerator(function* () {\n      const user = yield _this11.getCurrentUserValue();\n      if (!user) throw new Error('Usuário não autenticado');\n      return _this11.supabase.from('transacoes').insert({\n        ...transacao,\n        usuario_id: user.id,\n        created_at: new Date()\n      }).select().single();\n    })();\n  }\n  atualizarTransacao(id, transacao) {\n    var _this12 = this;\n    return _asyncToGenerator(function* () {\n      const user = yield _this12.getCurrentUserValue();\n      if (!user) throw new Error('Usuário não autenticado');\n      return _this12.supabase.from('transacoes').update({\n        ...transacao,\n        updated_at: new Date()\n      }).eq('id', id).eq('usuario_id', user.id);\n    })();\n  }\n  excluirTransacao(id) {\n    var _this13 = this;\n    return _asyncToGenerator(function* () {\n      const user = yield _this13.getCurrentUserValue();\n      if (!user) throw new Error('Usuário não autenticado');\n      return _this13.supabase.from('transacoes').delete().eq('id', id).eq('usuario_id', user.id);\n    })();\n  }\n  // Categorias\n  getCategorias() {\n    var _this14 = this;\n    return _asyncToGenerator(function* () {\n      return _this14.supabase.from('transacoes').select('categoria').order('categoria');\n    })();\n  }\n  static {\n    this.ɵfac = function SupabaseService_Factory(t) {\n      return new (t || SupabaseService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: SupabaseService,\n      factory: SupabaseService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["createClient","BehaviorSubject","environment","SupabaseService","constructor","currentUser","supabase","supabaseUrl","supabaseKey","auth","onAuthStateChange","event","session","user","next","loadUser","_this","_asyncToGenerator","data","getUser","getCurrentUser","asObservable","getCurrentUserValue","value","signIn","email","password","_this2","response","signInWithPassword","signUp","_this3","signOut","_this4","error","resetPassword","_this5","resetPasswordForEmail","updateUserProfile","profile","_this6","Error","from","upsert","id","nome","sobrenome","updated_at","Date","getUserProfile","_this7","select","eq","single","getContas","_this8","or","order","criarConta","conta","_this9","usuario2_id","usuario2_email","usuario2","insert","saldo_inicial","saldo_atual","usuario1_id","atualizarConta","_this0","update","excluirConta","_this1","delete","getTransacoes","contaId","_this10","query","ascending","criarTransacao","transacao","_this11","usuario_id","created_at","atualizarTransacao","_this12","excluirTransacao","_this13","getCategorias","_this14","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Bomfim\\Documents\\GitHub\\Controle-financeiro-casal\\workspace\\sistema-financeiro-casal-frontend\\src\\app\\services\\supabase.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { createClient, SupabaseClient, User, AuthResponse } from '@supabase/supabase-js';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { environment } from '../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SupabaseService {\n  private supabase: SupabaseClient;\n  private currentUser = new BehaviorSubject<User | null>(null);\n\n  constructor() {\n    this.supabase = createClient(\n      environment.supabaseUrl,\n      environment.supabaseKey\n    );\n    \n    // Verificar se o usuário já está autenticado\n    this.supabase.auth.onAuthStateChange((event, session) => {\n      if (session?.user) {\n        this.currentUser.next(session.user);\n      } else {\n        this.currentUser.next(null);\n      }\n    });\n\n    // Carregar usuário inicial\n    this.loadUser();\n  }\n\n  private async loadUser() {\n    const { data } = await this.supabase.auth.getUser();\n    this.currentUser.next(data.user);\n  }\n\n  // Retorna o usuário atual como um Observable\n  public getCurrentUser(): Observable<User | null> {\n    return this.currentUser.asObservable();\n  }\n\n  // Retorna o usuário atual diretamente\n  public getCurrentUserValue(): User | null {\n    return this.currentUser.value;\n  }\n\n  // Autenticação\n  public async signIn(email: string, password: string): Promise<AuthResponse> {\n    const response = await this.supabase.auth.signInWithPassword({\n      email,\n      password\n    });\n    \n    if (response.data?.user) {\n      this.currentUser.next(response.data.user);\n    }\n    \n    return response;\n  }\n\n  public async signUp(email: string, password: string): Promise<AuthResponse> {\n    const response = await this.supabase.auth.signUp({\n      email,\n      password\n    });\n    \n    if (response.data?.user) {\n      this.currentUser.next(response.data.user);\n    }\n    \n    return response;\n  }\n\n  public async signOut(): Promise<{ error: any }> {\n    const { error } = await this.supabase.auth.signOut();\n    if (!error) {\n      this.currentUser.next(null);\n    }\n    return { error };\n  }\n\n  // Recuperação de senha\n  public async resetPassword(email: string): Promise<{ data: any, error: any }> {\n    return this.supabase.auth.resetPasswordForEmail(email);\n  }\n\n  // Perfil do usuário\n  async updateUserProfile(profile: { nome: string; sobrenome: string }) {\n    const user = await this.getCurrentUserValue();\n    if (!user) throw new Error('Usuário não autenticado');\n\n    return this.supabase\n      .from('perfis')\n      .upsert({\n        id: user.id,\n        nome: profile.nome,\n        sobrenome: profile.sobrenome,\n        updated_at: new Date()\n      });\n  }\n\n  async getUserProfile() {\n    const user = await this.getCurrentUserValue();\n    if (!user) throw new Error('Usuário não autenticado');\n\n    return this.supabase\n      .from('perfis')\n      .select('*')\n      .eq('id', user.id)\n      .single();\n  }\n\n  // Contas\n  async getContas() {\n    const user = await this.getCurrentUserValue();\n    if (!user) throw new Error('Usuário não autenticado');\n\n    return this.supabase\n      .from('contas')\n      .select('*')\n      .or(`usuario1_id.eq.${user.id},usuario2_id.eq.${user.id}`)\n      .order('nome');\n  }\n\n  async criarConta(conta: { nome: string; saldo_inicial: number; usuario2_email?: string }) {\n    const user = await this.getCurrentUserValue();\n    if (!user) throw new Error('Usuário não autenticado');\n\n    let usuario2_id = null;\n    if (conta.usuario2_email) {\n      const { data: usuario2 } = await this.supabase\n        .from('usuarios')\n        .select('id')\n        .eq('email', conta.usuario2_email)\n        .single();\n      \n      if (usuario2) {\n        usuario2_id = usuario2.id;\n      }\n    }\n\n    return this.supabase\n      .from('contas')\n      .insert({\n        nome: conta.nome,\n        saldo_inicial: conta.saldo_inicial,\n        saldo_atual: conta.saldo_inicial,\n        usuario1_id: user.id,\n        usuario2_id\n      })\n      .select()\n      .single();\n  }\n\n  async atualizarConta(id: string, conta: { nome: string; saldo_inicial: number; usuario2_email?: string }) {\n    const user = await this.getCurrentUserValue();\n    if (!user) throw new Error('Usuário não autenticado');\n\n    let usuario2_id = null;\n    if (conta.usuario2_email) {\n      const { data: usuario2 } = await this.supabase\n        .from('usuarios')\n        .select('id')\n        .eq('email', conta.usuario2_email)\n        .single();\n      \n      if (usuario2) {\n        usuario2_id = usuario2.id;\n      }\n    }\n\n    return this.supabase\n      .from('contas')\n      .update({\n        nome: conta.nome,\n        saldo_inicial: conta.saldo_inicial,\n        usuario2_id,\n        updated_at: new Date()\n      })\n      .eq('id', id)\n      .or(`usuario1_id.eq.${user.id},usuario2_id.eq.${user.id}`);\n  }\n\n  async excluirConta(id: string) {\n    const user = await this.getCurrentUserValue();\n    if (!user) throw new Error('Usuário não autenticado');\n\n    return this.supabase\n      .from('contas')\n      .delete()\n      .eq('id', id)\n      .or(`usuario1_id.eq.${user.id},usuario2_id.eq.${user.id}`);\n  }\n\n  // Transações\n  async getTransacoes(contaId?: string) {\n    const user = await this.getCurrentUserValue();\n    if (!user) throw new Error('Usuário não autenticado');\n\n    let query = this.supabase\n      .from('transacoes')\n      .select(`\n        *,\n        conta:contas(nome)\n      `)\n      .eq('usuario_id', user.id);\n\n    if (contaId) {\n      query = query.eq('conta_id', contaId);\n    }\n\n    return query.order('data', { ascending: false });\n  }\n\n  async criarTransacao(transacao: {\n    conta_id: string;\n    valor: number;\n    tipo: string;\n    categoria: string;\n    descricao: string;\n    data: Date;\n  }) {\n    const user = await this.getCurrentUserValue();\n    if (!user) throw new Error('Usuário não autenticado');\n\n    return this.supabase\n      .from('transacoes')\n      .insert({\n        ...transacao,\n        usuario_id: user.id,\n        created_at: new Date()\n      })\n      .select()\n      .single();\n  }\n\n  async atualizarTransacao(\n    id: string,\n    transacao: {\n      conta_id: string;\n      valor: number;\n      tipo: string;\n      categoria: string;\n      descricao: string;\n      data: Date;\n    }\n  ) {\n    const user = await this.getCurrentUserValue();\n    if (!user) throw new Error('Usuário não autenticado');\n\n    return this.supabase\n      .from('transacoes')\n      .update({\n        ...transacao,\n        updated_at: new Date()\n      })\n      .eq('id', id)\n      .eq('usuario_id', user.id);\n  }\n\n  async excluirTransacao(id: string) {\n    const user = await this.getCurrentUserValue();\n    if (!user) throw new Error('Usuário não autenticado');\n\n    return this.supabase\n      .from('transacoes')\n      .delete()\n      .eq('id', id)\n      .eq('usuario_id', user.id);\n  }\n\n  // Categorias\n  async getCategorias() {\n    return this.supabase\n      .from('transacoes')\n      .select('categoria')\n      .order('categoria');\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}