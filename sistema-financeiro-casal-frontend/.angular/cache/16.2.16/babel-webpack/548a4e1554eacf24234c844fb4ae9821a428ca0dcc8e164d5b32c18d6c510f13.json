{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Bomfim/Documents/GitHub/Controle-financeiro-casal/workspace/sistema-financeiro-casal-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { from, throwError } from 'rxjs';\nimport { map, catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./supabase.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/material/snack-bar\";\nexport class AuthService {\n  constructor(supabaseService, router, snackBar) {\n    this.supabaseService = supabaseService;\n    this.router = router;\n    this.snackBar = snackBar;\n  }\n  /**\n   * Realiza o login do usuário\n   * @param credentials Dados de autenticação (email e senha)\n   * @returns Observable com o usuário logado\n   */\n  login(credentials) {\n    return from(this.supabaseService.signIn(credentials.email, credentials.password)).pipe(map(response => {\n      if (response.error) {\n        throw new Error(response.error.message);\n      }\n      return response.data;\n    }), tap(() => {\n      this.snackBar.open('Login realizado com sucesso!', 'Fechar', {\n        duration: 3000\n      });\n    }), catchError(erro => {\n      console.error('Erro no login:', erro);\n      this.snackBar.open(`Erro no login: ${erro.message}`, 'Fechar', {\n        duration: 5000\n      });\n      return throwError(() => erro);\n    }));\n  }\n  /**\n   * Registra um novo usuário\n   * @param dados Dados de registro (email, senha, nome, sobrenome)\n   * @returns Observable com o usuário registrado\n   */\n  registrar(dados) {\n    return from(this.supabaseService.signUp(dados.email, dados.password)).pipe(map(response => {\n      if (response.error) {\n        throw new Error(response.error.message);\n      }\n      // Criar o perfil completo no banco de dados\n      if (response.data.user) {\n        this.criarPerfilUsuario(response.data.user.id, dados);\n      }\n      return response.data.user;\n    }), tap(user => {\n      this.snackBar.open('Usuário criado com sucesso! Verifique seu email para confirmar o cadastro.', 'Fechar', {\n        duration: 5000\n      });\n      this.router.navigate(['/login']);\n    }), catchError(erro => {\n      console.error('Erro no registro:', erro);\n      this.snackBar.open(`Erro no registro: ${erro.message}`, 'Fechar', {\n        duration: 5000\n      });\n      return throwError(() => erro);\n    }));\n  }\n  /**\n   * Cria o perfil completo do usuário na tabela usuarios\n   * @param userId ID do usuário\n   * @param dados Dados de registro com nome e sobrenome\n   */\n  criarPerfilUsuario(userId, dados) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const {\n          error\n        } = yield _this.supabaseService.getSupabase().from('usuarios').insert({\n          id: userId,\n          nome: dados.nome,\n          sobrenome: dados.sobrenome,\n          email: dados.email\n        });\n        if (error) {\n          console.error('Erro ao criar perfil:', error);\n        }\n      } catch (erro) {\n        console.error('Erro na chamada API:', erro);\n      }\n    })();\n  }\n  /**\n   * Recupera a senha do usuário\n   * @param email Email do usuário\n   * @returns Observable com o status da operação\n   */\n  recuperarSenha(email) {\n    return from(this.supabaseService.resetPassword(email)).pipe(map(({\n      data,\n      error\n    }) => {\n      if (error) {\n        throw new Error(error.message);\n      }\n      return true;\n    }), tap(() => {\n      this.snackBar.open('Email enviado com instruções para recuperação de senha.', 'Fechar', {\n        duration: 5000\n      });\n    }), catchError(erro => {\n      console.error('Erro na recuperação de senha:', erro);\n      this.snackBar.open(`Erro ao enviar email: ${erro.message}`, 'Fechar', {\n        duration: 5000\n      });\n      return throwError(() => erro);\n    }));\n  }\n  /**\n   * Realiza o logout do usuário\n   * @returns Observable com o status da operação\n   */\n  logout() {\n    return from(this.supabaseService.signOut()).pipe(map(({\n      error\n    }) => {\n      if (error) {\n        throw new Error(error.message);\n      }\n      return true;\n    }), tap(() => {\n      this.router.navigate(['/login']);\n    }), catchError(erro => {\n      console.error('Erro no logout:', erro);\n      this.snackBar.open(`Erro no logout: ${erro.message}`, 'Fechar', {\n        duration: 3000\n      });\n      return throwError(() => erro);\n    }));\n  }\n  /**\n   * Verifica se o usuário está autenticado\n   * @returns Observable com status booleano de autenticação\n   */\n  estaAutenticado() {\n    return this.supabaseService.getCurrentUser().pipe(map(user => !!user));\n  }\n  /**\n   * Obtém os dados do usuário atual\n   * @returns Observable com o usuário atual\n   */\n  getUsuarioAtual() {\n    return this.supabaseService.getCurrentUser();\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.SupabaseService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.MatSnackBar));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["from","throwError","map","catchError","tap","AuthService","constructor","supabaseService","router","snackBar","login","credentials","signIn","email","password","pipe","response","error","Error","message","data","open","duration","erro","console","registrar","dados","signUp","user","criarPerfilUsuario","id","navigate","userId","_this","_asyncToGenerator","getSupabase","insert","nome","sobrenome","recuperarSenha","resetPassword","logout","signOut","estaAutenticado","getCurrentUser","getUsuarioAtual","i0","ɵɵinject","i1","SupabaseService","i2","Router","i3","MatSnackBar","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Bomfim\\Documents\\GitHub\\Controle-financeiro-casal\\workspace\\sistema-financeiro-casal-frontend\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Observable, from, throwError, of } from 'rxjs';\nimport { map, catchError, tap } from 'rxjs/operators';\nimport { SupabaseService } from './supabase.service';\nimport { DadosAutenticacao, DadosRegistro, Usuario } from '../models/usuario.model';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  \n  constructor(\n    private supabaseService: SupabaseService,\n    private router: Router,\n    private snackBar: MatSnackBar\n  ) { }\n\n  /**\n   * Realiza o login do usuário\n   * @param credentials Dados de autenticação (email e senha)\n   * @returns Observable com o usuário logado\n   */\n  login(credentials: { email: string, password: string }): Observable<any> {\n    return from(this.supabaseService.signIn(credentials.email, credentials.password)).pipe(\n      map(response => {\n        if (response.error) {\n          throw new Error(response.error.message);\n        }\n        return response.data;\n      }),\n      tap(() => {\n        this.snackBar.open('Login realizado com sucesso!', 'Fechar', {\n          duration: 3000\n        });\n      }),\n      catchError(erro => {\n        console.error('Erro no login:', erro);\n        this.snackBar.open(`Erro no login: ${erro.message}`, 'Fechar', {\n          duration: 5000\n        });\n        return throwError(() => erro);\n      })\n    );\n  }\n\n  /**\n   * Registra um novo usuário\n   * @param dados Dados de registro (email, senha, nome, sobrenome)\n   * @returns Observable com o usuário registrado\n   */\n  registrar(dados: DadosRegistro): Observable<Usuario> {\n    return from(this.supabaseService.signUp(dados.email, dados.password)).pipe(\n      map(response => {\n        if (response.error) {\n          throw new Error(response.error.message);\n        }\n        \n        // Criar o perfil completo no banco de dados\n        if (response.data.user) {\n          this.criarPerfilUsuario(response.data.user.id, dados);\n        }\n        \n        return response.data.user as Usuario;\n      }),\n      tap(user => {\n        this.snackBar.open('Usuário criado com sucesso! Verifique seu email para confirmar o cadastro.', 'Fechar', {\n          duration: 5000\n        });\n        this.router.navigate(['/login']);\n      }),\n      catchError(erro => {\n        console.error('Erro no registro:', erro);\n        this.snackBar.open(`Erro no registro: ${erro.message}`, 'Fechar', {\n          duration: 5000\n        });\n        return throwError(() => erro);\n      })\n    );\n  }\n\n  /**\n   * Cria o perfil completo do usuário na tabela usuarios\n   * @param userId ID do usuário\n   * @param dados Dados de registro com nome e sobrenome\n   */\n  private async criarPerfilUsuario(userId: string, dados: DadosRegistro) {\n    try {\n      const { error } = await this.supabaseService.getSupabase()\n        .from('usuarios')\n        .insert({\n          id: userId,\n          nome: dados.nome,\n          sobrenome: dados.sobrenome,\n          email: dados.email\n        });\n      \n      if (error) {\n        console.error('Erro ao criar perfil:', error);\n      }\n    } catch (erro) {\n      console.error('Erro na chamada API:', erro);\n    }\n  }\n\n  /**\n   * Recupera a senha do usuário\n   * @param email Email do usuário\n   * @returns Observable com o status da operação\n   */\n  recuperarSenha(email: string): Observable<boolean> {\n    return from(this.supabaseService.resetPassword(email)).pipe(\n      map(({ data, error }) => {\n        if (error) {\n          throw new Error(error.message);\n        }\n        return true;\n      }),\n      tap(() => {\n        this.snackBar.open('Email enviado com instruções para recuperação de senha.', 'Fechar', {\n          duration: 5000\n        });\n      }),\n      catchError(erro => {\n        console.error('Erro na recuperação de senha:', erro);\n        this.snackBar.open(`Erro ao enviar email: ${erro.message}`, 'Fechar', {\n          duration: 5000\n        });\n        return throwError(() => erro);\n      })\n    );\n  }\n\n  /**\n   * Realiza o logout do usuário\n   * @returns Observable com o status da operação\n   */\n  logout(): Observable<boolean> {\n    return from(this.supabaseService.signOut()).pipe(\n      map(({ error }) => {\n        if (error) {\n          throw new Error(error.message);\n        }\n        return true;\n      }),\n      tap(() => {\n        this.router.navigate(['/login']);\n      }),\n      catchError(erro => {\n        console.error('Erro no logout:', erro);\n        this.snackBar.open(`Erro no logout: ${erro.message}`, 'Fechar', {\n          duration: 3000\n        });\n        return throwError(() => erro);\n      })\n    );\n  }\n\n  /**\n   * Verifica se o usuário está autenticado\n   * @returns Observable com status booleano de autenticação\n   */\n  estaAutenticado(): Observable<boolean> {\n    return this.supabaseService.getCurrentUser().pipe(\n      map(user => !!user)\n    );\n  }\n\n  /**\n   * Obtém os dados do usuário atual\n   * @returns Observable com o usuário atual\n   */\n  getUsuarioAtual(): Observable<Usuario | null> {\n    return this.supabaseService.getCurrentUser() as Observable<Usuario | null>;\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}