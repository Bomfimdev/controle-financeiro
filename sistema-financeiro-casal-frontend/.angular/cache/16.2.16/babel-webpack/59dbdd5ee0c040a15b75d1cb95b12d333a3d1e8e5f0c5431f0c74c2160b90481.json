{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Bomfim/Documents/GitHub/Controle-financeiro-casal/workspace/sistema-financeiro-casal-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { createClient } from '@supabase/supabase-js';\nimport { BehaviorSubject, from } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nexport class SupabaseService {\n  constructor() {\n    this.currentUser = new BehaviorSubject(null);\n    this.supabase = createClient(environment.supabaseUrl, environment.supabaseKey);\n    // Verificar se o usuário já está autenticado\n    this.supabase.auth.onAuthStateChange((event, session) => {\n      if (session?.user) {\n        this.currentUser.next(session.user);\n      } else {\n        this.currentUser.next(null);\n      }\n    });\n    // Carregar usuário inicial\n    this.loadUser();\n  }\n  loadUser() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const {\n        data\n      } = yield _this.supabase.auth.getUser();\n      _this.currentUser.next(data.user);\n    })();\n  }\n  // Retorna o usuário atual como um Observable\n  getCurrentUser() {\n    return this.currentUser.asObservable();\n  }\n  // Retorna o usuário atual diretamente\n  getCurrentUserValue() {\n    return this.currentUser.value;\n  }\n  // Autenticação\n  signIn(email, password) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const response = yield _this2.supabase.auth.signInWithPassword({\n        email,\n        password\n      });\n      if (response.data?.user) {\n        _this2.currentUser.next(response.data.user);\n      }\n      return response;\n    })();\n  }\n  signUp(email, password) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const response = yield _this3.supabase.auth.signUp({\n        email,\n        password\n      });\n      if (response.data?.user) {\n        _this3.currentUser.next(response.data.user);\n      }\n      return response;\n    })();\n  }\n  signOut() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        error\n      } = yield _this4.supabase.auth.signOut();\n      if (!error) {\n        _this4.currentUser.next(null);\n      }\n      return {\n        error\n      };\n    })();\n  }\n  // Sessão\n  getSession() {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      return _this5.supabase.auth.getSession();\n    })();\n  }\n  // Recuperação de senha\n  resetPassword(email) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      return _this6.supabase.auth.resetPasswordForEmail(email);\n    })();\n  }\n  // Perfil do usuário\n  updateUserProfile(profile) {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      const user = yield _this7.getCurrentUserValue();\n      if (!user) throw new Error('Usuário não autenticado');\n      return _this7.supabase.from('perfis').upsert({\n        id: user.id,\n        nome: profile.nome,\n        sobrenome: profile.sobrenome,\n        updated_at: new Date()\n      });\n    })();\n  }\n  getUserProfile() {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      const user = yield _this8.getCurrentUserValue();\n      if (!user) throw new Error('Usuário não autenticado');\n      return _this8.supabase.from('perfis').select('*').eq('id', user.id).single();\n    })();\n  }\n  // Contas\n  getContas() {\n    return from(this.supabase.from('contas').select('*').order('created_at', {\n      ascending: false\n    })).pipe(map(response => response.data || []));\n  }\n  getConta(id) {\n    return from(this.supabase.from('contas').select('*').eq('id', id).single()).pipe(map(response => response.data));\n  }\n  criarConta(conta) {\n    return from(this.supabase.from('contas').insert(conta).select().single()).pipe(map(response => response.data));\n  }\n  atualizarConta(id, conta) {\n    var _this9 = this;\n    return _asyncToGenerator(function* () {\n      const user = yield _this9.getCurrentUserValue();\n      if (!user) throw new Error('Usuário não autenticado');\n      let usuario2_id = null;\n      if (conta.usuario2_email) {\n        const {\n          data: usuario2\n        } = yield _this9.supabase.from('usuarios').select('id').eq('email', conta.usuario2_email).single();\n        if (usuario2) {\n          usuario2_id = usuario2.id;\n        }\n      }\n      return _this9.supabase.from('contas').update({\n        nome: conta.nome,\n        saldo_inicial: conta.saldo_inicial,\n        usuario2_id,\n        updated_at: new Date()\n      }).eq('id', id).or(`usuario1_id.eq.${user.id},usuario2_id.eq.${user.id}`);\n    })();\n  }\n  excluirConta(id) {\n    var _this0 = this;\n    return _asyncToGenerator(function* () {\n      const user = yield _this0.getCurrentUserValue();\n      if (!user) throw new Error('Usuário não autenticado');\n      return _this0.supabase.from('contas').delete().eq('id', id).or(`usuario1_id.eq.${user.id},usuario2_id.eq.${user.id}`);\n    })();\n  }\n  // Transações\n  getTransacoes(contaId, categoria) {\n    let query = this.supabase.from('transacoes').select(`\n        *,\n        contas (\n          nome\n        )\n      `).order('data', {\n      ascending: false\n    });\n    if (contaId) {\n      query = query.eq('conta_id', contaId);\n    }\n    if (categoria) {\n      query = query.eq('categoria', categoria);\n    }\n    return from(query).pipe(map(response => response.data || []));\n  }\n  getTransacoesPorConta(contaId) {\n    return from(this.supabase.from('transacoes').select('*').eq('conta_id', contaId).order('data', {\n      ascending: false\n    })).pipe(map(response => response.data || []));\n  }\n  criarTransacao(transacao) {\n    return from(this.supabase.from('transacoes').insert(transacao).select().single()).pipe(map(response => response.data));\n  }\n  atualizarTransacao(id, transacao) {\n    var _this1 = this;\n    return _asyncToGenerator(function* () {\n      const user = yield _this1.getCurrentUserValue();\n      if (!user) throw new Error('Usuário não autenticado');\n      return _this1.supabase.from('transacoes').update({\n        ...transacao,\n        updated_at: new Date()\n      }).eq('id', id).eq('usuario_id', user.id);\n    })();\n  }\n  excluirTransacao(id) {\n    var _this10 = this;\n    return _asyncToGenerator(function* () {\n      const user = yield _this10.getCurrentUserValue();\n      if (!user) throw new Error('Usuário não autenticado');\n      return _this10.supabase.from('transacoes').delete().eq('id', id).eq('usuario_id', user.id);\n    })();\n  }\n  // Categorias\n  getCategorias() {\n    return from(this.supabase.from('categorias').select('nome').order('nome')).pipe(map(response => (response.data || []).map(cat => cat.nome)));\n  }\n  static {\n    this.ɵfac = function SupabaseService_Factory(t) {\n      return new (t || SupabaseService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: SupabaseService,\n      factory: SupabaseService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["createClient","BehaviorSubject","from","map","environment","SupabaseService","constructor","currentUser","supabase","supabaseUrl","supabaseKey","auth","onAuthStateChange","event","session","user","next","loadUser","_this","_asyncToGenerator","data","getUser","getCurrentUser","asObservable","getCurrentUserValue","value","signIn","email","password","_this2","response","signInWithPassword","signUp","_this3","signOut","_this4","error","getSession","_this5","resetPassword","_this6","resetPasswordForEmail","updateUserProfile","profile","_this7","Error","upsert","id","nome","sobrenome","updated_at","Date","getUserProfile","_this8","select","eq","single","getContas","order","ascending","pipe","getConta","criarConta","conta","insert","atualizarConta","_this9","usuario2_id","usuario2_email","usuario2","update","saldo_inicial","or","excluirConta","_this0","delete","getTransacoes","contaId","categoria","query","getTransacoesPorConta","criarTransacao","transacao","atualizarTransacao","_this1","excluirTransacao","_this10","getCategorias","cat","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Bomfim\\Documents\\GitHub\\Controle-financeiro-casal\\workspace\\sistema-financeiro-casal-frontend\\src\\app\\services\\supabase.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { createClient, SupabaseClient, User, AuthResponse } from '@supabase/supabase-js';\nimport { BehaviorSubject, Observable, from } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SupabaseService {\n  private supabase: SupabaseClient;\n  private currentUser = new BehaviorSubject<User | null>(null);\n\n  constructor() {\n    this.supabase = createClient(\n      environment.supabaseUrl,\n      environment.supabaseKey\n    );\n    \n    // Verificar se o usuário já está autenticado\n    this.supabase.auth.onAuthStateChange((event, session) => {\n      if (session?.user) {\n        this.currentUser.next(session.user);\n      } else {\n        this.currentUser.next(null);\n      }\n    });\n\n    // Carregar usuário inicial\n    this.loadUser();\n  }\n\n  private async loadUser() {\n    const { data } = await this.supabase.auth.getUser();\n    this.currentUser.next(data.user);\n  }\n\n  // Retorna o usuário atual como um Observable\n  public getCurrentUser(): Observable<User | null> {\n    return this.currentUser.asObservable();\n  }\n\n  // Retorna o usuário atual diretamente\n  public getCurrentUserValue(): User | null {\n    return this.currentUser.value;\n  }\n\n  // Autenticação\n  public async signIn(email: string, password: string): Promise<AuthResponse> {\n    const response = await this.supabase.auth.signInWithPassword({\n      email,\n      password\n    });\n    \n    if (response.data?.user) {\n      this.currentUser.next(response.data.user);\n    }\n    \n    return response;\n  }\n\n  public async signUp(email: string, password: string): Promise<AuthResponse> {\n    const response = await this.supabase.auth.signUp({\n      email,\n      password\n    });\n    \n    if (response.data?.user) {\n      this.currentUser.next(response.data.user);\n    }\n    \n    return response;\n  }\n\n  public async signOut(): Promise<{ error: any }> {\n    const { error } = await this.supabase.auth.signOut();\n    if (!error) {\n      this.currentUser.next(null);\n    }\n    return { error };\n  }\n\n  // Sessão\n  public async getSession() {\n    return this.supabase.auth.getSession();\n  }\n\n  // Recuperação de senha\n  public async resetPassword(email: string): Promise<{ data: any, error: any }> {\n    return this.supabase.auth.resetPasswordForEmail(email);\n  }\n\n  // Perfil do usuário\n  async updateUserProfile(profile: { nome: string; sobrenome: string }) {\n    const user = await this.getCurrentUserValue();\n    if (!user) throw new Error('Usuário não autenticado');\n\n    return this.supabase\n      .from('perfis')\n      .upsert({\n        id: user.id,\n        nome: profile.nome,\n        sobrenome: profile.sobrenome,\n        updated_at: new Date()\n      });\n  }\n\n  async getUserProfile() {\n    const user = await this.getCurrentUserValue();\n    if (!user) throw new Error('Usuário não autenticado');\n\n    return this.supabase\n      .from('perfis')\n      .select('*')\n      .eq('id', user.id)\n      .single();\n  }\n\n  // Contas\n  getContas(): Observable<any[]> {\n    return from(this.supabase\n      .from('contas')\n      .select('*')\n      .order('created_at', { ascending: false }))\n      .pipe(\n        map(response => response.data || [])\n      );\n  }\n\n  getConta(id: string): Observable<any> {\n    return from(this.supabase\n      .from('contas')\n      .select('*')\n      .eq('id', id)\n      .single())\n      .pipe(\n        map(response => response.data)\n      );\n  }\n\n  criarConta(conta: any): Observable<any> {\n    return from(this.supabase\n      .from('contas')\n      .insert(conta)\n      .select()\n      .single())\n      .pipe(\n        map(response => response.data)\n      );\n  }\n\n  async atualizarConta(id: string, conta: { nome: string; saldo_inicial: number; usuario2_email?: string }) {\n    const user = await this.getCurrentUserValue();\n    if (!user) throw new Error('Usuário não autenticado');\n\n    let usuario2_id = null;\n    if (conta.usuario2_email) {\n      const { data: usuario2 } = await this.supabase\n        .from('usuarios')\n        .select('id')\n        .eq('email', conta.usuario2_email)\n        .single();\n      \n      if (usuario2) {\n        usuario2_id = usuario2.id;\n      }\n    }\n\n    return this.supabase\n      .from('contas')\n      .update({\n        nome: conta.nome,\n        saldo_inicial: conta.saldo_inicial,\n        usuario2_id,\n        updated_at: new Date()\n      })\n      .eq('id', id)\n      .or(`usuario1_id.eq.${user.id},usuario2_id.eq.${user.id}`);\n  }\n\n  async excluirConta(id: string) {\n    const user = await this.getCurrentUserValue();\n    if (!user) throw new Error('Usuário não autenticado');\n\n    return this.supabase\n      .from('contas')\n      .delete()\n      .eq('id', id)\n      .or(`usuario1_id.eq.${user.id},usuario2_id.eq.${user.id}`);\n  }\n\n  // Transações\n  getTransacoes(contaId?: string, categoria?: string): Observable<any[]> {\n    let query = this.supabase\n      .from('transacoes')\n      .select(`\n        *,\n        contas (\n          nome\n        )\n      `)\n      .order('data', { ascending: false });\n\n    if (contaId) {\n      query = query.eq('conta_id', contaId);\n    }\n\n    if (categoria) {\n      query = query.eq('categoria', categoria);\n    }\n\n    return from(query).pipe(\n      map(response => response.data || [])\n    );\n  }\n\n  getTransacoesPorConta(contaId: string): Observable<any[]> {\n    return from(this.supabase\n      .from('transacoes')\n      .select('*')\n      .eq('conta_id', contaId)\n      .order('data', { ascending: false }))\n      .pipe(\n        map(response => response.data || [])\n      );\n  }\n\n  criarTransacao(transacao: any): Observable<any> {\n    return from(this.supabase\n      .from('transacoes')\n      .insert(transacao)\n      .select()\n      .single())\n      .pipe(\n        map(response => response.data)\n      );\n  }\n\n  async atualizarTransacao(\n    id: string,\n    transacao: {\n      conta_id: string;\n      valor: number;\n      tipo: string;\n      categoria: string;\n      descricao: string;\n      data: Date;\n    }\n  ) {\n    const user = await this.getCurrentUserValue();\n    if (!user) throw new Error('Usuário não autenticado');\n\n    return this.supabase\n      .from('transacoes')\n      .update({\n        ...transacao,\n        updated_at: new Date()\n      })\n      .eq('id', id)\n      .eq('usuario_id', user.id);\n  }\n\n  async excluirTransacao(id: string) {\n    const user = await this.getCurrentUserValue();\n    if (!user) throw new Error('Usuário não autenticado');\n\n    return this.supabase\n      .from('transacoes')\n      .delete()\n      .eq('id', id)\n      .eq('usuario_id', user.id);\n  }\n\n  // Categorias\n  getCategorias(): Observable<string[]> {\n    return from(this.supabase\n      .from('categorias')\n      .select('nome')\n      .order('nome'))\n      .pipe(\n        map(response => (response.data || []).map(cat => cat.nome))\n      );\n  }\n}"],"mappings":";AACA,SAASA,YAAY,QAA4C,uBAAuB;AACxF,SAASC,eAAe,EAAcC,IAAI,QAAQ,MAAM;AACxD,SAASC,GAAG,QAAQ,gBAAgB;AACpC,SAASC,WAAW,QAAQ,gCAAgC;;AAK5D,OAAM,MAAOC,eAAe;EAI1BC,YAAA;IAFQ,KAAAC,WAAW,GAAG,IAAIN,eAAe,CAAc,IAAI,CAAC;IAG1D,IAAI,CAACO,QAAQ,GAAGR,YAAY,CAC1BI,WAAW,CAACK,WAAW,EACvBL,WAAW,CAACM,WAAW,CACxB;IAED;IACA,IAAI,CAACF,QAAQ,CAACG,IAAI,CAACC,iBAAiB,CAAC,CAACC,KAAK,EAAEC,OAAO,KAAI;MACtD,IAAIA,OAAO,EAAEC,IAAI,EAAE;QACjB,IAAI,CAACR,WAAW,CAACS,IAAI,CAACF,OAAO,CAACC,IAAI,CAAC;OACpC,MAAM;QACL,IAAI,CAACR,WAAW,CAACS,IAAI,CAAC,IAAI,CAAC;;IAE/B,CAAC,CAAC;IAEF;IACA,IAAI,CAACC,QAAQ,EAAE;EACjB;EAEcA,QAAQA,CAAA;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MACpB,MAAM;QAAEC;MAAI,CAAE,SAASF,KAAI,CAACV,QAAQ,CAACG,IAAI,CAACU,OAAO,EAAE;MACnDH,KAAI,CAACX,WAAW,CAACS,IAAI,CAACI,IAAI,CAACL,IAAI,CAAC;IAAC;EACnC;EAEA;EACOO,cAAcA,CAAA;IACnB,OAAO,IAAI,CAACf,WAAW,CAACgB,YAAY,EAAE;EACxC;EAEA;EACOC,mBAAmBA,CAAA;IACxB,OAAO,IAAI,CAACjB,WAAW,CAACkB,KAAK;EAC/B;EAEA;EACaC,MAAMA,CAACC,KAAa,EAAEC,QAAgB;IAAA,IAAAC,MAAA;IAAA,OAAAV,iBAAA;MACjD,MAAMW,QAAQ,SAASD,MAAI,CAACrB,QAAQ,CAACG,IAAI,CAACoB,kBAAkB,CAAC;QAC3DJ,KAAK;QACLC;OACD,CAAC;MAEF,IAAIE,QAAQ,CAACV,IAAI,EAAEL,IAAI,EAAE;QACvBc,MAAI,CAACtB,WAAW,CAACS,IAAI,CAACc,QAAQ,CAACV,IAAI,CAACL,IAAI,CAAC;;MAG3C,OAAOe,QAAQ;IAAC;EAClB;EAEaE,MAAMA,CAACL,KAAa,EAAEC,QAAgB;IAAA,IAAAK,MAAA;IAAA,OAAAd,iBAAA;MACjD,MAAMW,QAAQ,SAASG,MAAI,CAACzB,QAAQ,CAACG,IAAI,CAACqB,MAAM,CAAC;QAC/CL,KAAK;QACLC;OACD,CAAC;MAEF,IAAIE,QAAQ,CAACV,IAAI,EAAEL,IAAI,EAAE;QACvBkB,MAAI,CAAC1B,WAAW,CAACS,IAAI,CAACc,QAAQ,CAACV,IAAI,CAACL,IAAI,CAAC;;MAG3C,OAAOe,QAAQ;IAAC;EAClB;EAEaI,OAAOA,CAAA;IAAA,IAAAC,MAAA;IAAA,OAAAhB,iBAAA;MAClB,MAAM;QAAEiB;MAAK,CAAE,SAASD,MAAI,CAAC3B,QAAQ,CAACG,IAAI,CAACuB,OAAO,EAAE;MACpD,IAAI,CAACE,KAAK,EAAE;QACVD,MAAI,CAAC5B,WAAW,CAACS,IAAI,CAAC,IAAI,CAAC;;MAE7B,OAAO;QAAEoB;MAAK,CAAE;IAAC;EACnB;EAEA;EACaC,UAAUA,CAAA;IAAA,IAAAC,MAAA;IAAA,OAAAnB,iBAAA;MACrB,OAAOmB,MAAI,CAAC9B,QAAQ,CAACG,IAAI,CAAC0B,UAAU,EAAE;IAAC;EACzC;EAEA;EACaE,aAAaA,CAACZ,KAAa;IAAA,IAAAa,MAAA;IAAA,OAAArB,iBAAA;MACtC,OAAOqB,MAAI,CAAChC,QAAQ,CAACG,IAAI,CAAC8B,qBAAqB,CAACd,KAAK,CAAC;IAAC;EACzD;EAEA;EACMe,iBAAiBA,CAACC,OAA4C;IAAA,IAAAC,MAAA;IAAA,OAAAzB,iBAAA;MAClE,MAAMJ,IAAI,SAAS6B,MAAI,CAACpB,mBAAmB,EAAE;MAC7C,IAAI,CAACT,IAAI,EAAE,MAAM,IAAI8B,KAAK,CAAC,yBAAyB,CAAC;MAErD,OAAOD,MAAI,CAACpC,QAAQ,CACjBN,IAAI,CAAC,QAAQ,CAAC,CACd4C,MAAM,CAAC;QACNC,EAAE,EAAEhC,IAAI,CAACgC,EAAE;QACXC,IAAI,EAAEL,OAAO,CAACK,IAAI;QAClBC,SAAS,EAAEN,OAAO,CAACM,SAAS;QAC5BC,UAAU,EAAE,IAAIC,IAAI;OACrB,CAAC;IAAC;EACP;EAEMC,cAAcA,CAAA;IAAA,IAAAC,MAAA;IAAA,OAAAlC,iBAAA;MAClB,MAAMJ,IAAI,SAASsC,MAAI,CAAC7B,mBAAmB,EAAE;MAC7C,IAAI,CAACT,IAAI,EAAE,MAAM,IAAI8B,KAAK,CAAC,yBAAyB,CAAC;MAErD,OAAOQ,MAAI,CAAC7C,QAAQ,CACjBN,IAAI,CAAC,QAAQ,CAAC,CACdoD,MAAM,CAAC,GAAG,CAAC,CACXC,EAAE,CAAC,IAAI,EAAExC,IAAI,CAACgC,EAAE,CAAC,CACjBS,MAAM,EAAE;IAAC;EACd;EAEA;EACAC,SAASA,CAAA;IACP,OAAOvD,IAAI,CAAC,IAAI,CAACM,QAAQ,CACtBN,IAAI,CAAC,QAAQ,CAAC,CACdoD,MAAM,CAAC,GAAG,CAAC,CACXI,KAAK,CAAC,YAAY,EAAE;MAAEC,SAAS,EAAE;IAAK,CAAE,CAAC,CAAC,CAC1CC,IAAI,CACHzD,GAAG,CAAC2B,QAAQ,IAAIA,QAAQ,CAACV,IAAI,IAAI,EAAE,CAAC,CACrC;EACL;EAEAyC,QAAQA,CAACd,EAAU;IACjB,OAAO7C,IAAI,CAAC,IAAI,CAACM,QAAQ,CACtBN,IAAI,CAAC,QAAQ,CAAC,CACdoD,MAAM,CAAC,GAAG,CAAC,CACXC,EAAE,CAAC,IAAI,EAAER,EAAE,CAAC,CACZS,MAAM,EAAE,CAAC,CACTI,IAAI,CACHzD,GAAG,CAAC2B,QAAQ,IAAIA,QAAQ,CAACV,IAAI,CAAC,CAC/B;EACL;EAEA0C,UAAUA,CAACC,KAAU;IACnB,OAAO7D,IAAI,CAAC,IAAI,CAACM,QAAQ,CACtBN,IAAI,CAAC,QAAQ,CAAC,CACd8D,MAAM,CAACD,KAAK,CAAC,CACbT,MAAM,EAAE,CACRE,MAAM,EAAE,CAAC,CACTI,IAAI,CACHzD,GAAG,CAAC2B,QAAQ,IAAIA,QAAQ,CAACV,IAAI,CAAC,CAC/B;EACL;EAEM6C,cAAcA,CAAClB,EAAU,EAAEgB,KAAuE;IAAA,IAAAG,MAAA;IAAA,OAAA/C,iBAAA;MACtG,MAAMJ,IAAI,SAASmD,MAAI,CAAC1C,mBAAmB,EAAE;MAC7C,IAAI,CAACT,IAAI,EAAE,MAAM,IAAI8B,KAAK,CAAC,yBAAyB,CAAC;MAErD,IAAIsB,WAAW,GAAG,IAAI;MACtB,IAAIJ,KAAK,CAACK,cAAc,EAAE;QACxB,MAAM;UAAEhD,IAAI,EAAEiD;QAAQ,CAAE,SAASH,MAAI,CAAC1D,QAAQ,CAC3CN,IAAI,CAAC,UAAU,CAAC,CAChBoD,MAAM,CAAC,IAAI,CAAC,CACZC,EAAE,CAAC,OAAO,EAAEQ,KAAK,CAACK,cAAc,CAAC,CACjCZ,MAAM,EAAE;QAEX,IAAIa,QAAQ,EAAE;UACZF,WAAW,GAAGE,QAAQ,CAACtB,EAAE;;;MAI7B,OAAOmB,MAAI,CAAC1D,QAAQ,CACjBN,IAAI,CAAC,QAAQ,CAAC,CACdoE,MAAM,CAAC;QACNtB,IAAI,EAAEe,KAAK,CAACf,IAAI;QAChBuB,aAAa,EAAER,KAAK,CAACQ,aAAa;QAClCJ,WAAW;QACXjB,UAAU,EAAE,IAAIC,IAAI;OACrB,CAAC,CACDI,EAAE,CAAC,IAAI,EAAER,EAAE,CAAC,CACZyB,EAAE,CAAC,kBAAkBzD,IAAI,CAACgC,EAAE,mBAAmBhC,IAAI,CAACgC,EAAE,EAAE,CAAC;IAAC;EAC/D;EAEM0B,YAAYA,CAAC1B,EAAU;IAAA,IAAA2B,MAAA;IAAA,OAAAvD,iBAAA;MAC3B,MAAMJ,IAAI,SAAS2D,MAAI,CAAClD,mBAAmB,EAAE;MAC7C,IAAI,CAACT,IAAI,EAAE,MAAM,IAAI8B,KAAK,CAAC,yBAAyB,CAAC;MAErD,OAAO6B,MAAI,CAAClE,QAAQ,CACjBN,IAAI,CAAC,QAAQ,CAAC,CACdyE,MAAM,EAAE,CACRpB,EAAE,CAAC,IAAI,EAAER,EAAE,CAAC,CACZyB,EAAE,CAAC,kBAAkBzD,IAAI,CAACgC,EAAE,mBAAmBhC,IAAI,CAACgC,EAAE,EAAE,CAAC;IAAC;EAC/D;EAEA;EACA6B,aAAaA,CAACC,OAAgB,EAAEC,SAAkB;IAChD,IAAIC,KAAK,GAAG,IAAI,CAACvE,QAAQ,CACtBN,IAAI,CAAC,YAAY,CAAC,CAClBoD,MAAM,CAAC;;;;;OAKP,CAAC,CACDI,KAAK,CAAC,MAAM,EAAE;MAAEC,SAAS,EAAE;IAAK,CAAE,CAAC;IAEtC,IAAIkB,OAAO,EAAE;MACXE,KAAK,GAAGA,KAAK,CAACxB,EAAE,CAAC,UAAU,EAAEsB,OAAO,CAAC;;IAGvC,IAAIC,SAAS,EAAE;MACbC,KAAK,GAAGA,KAAK,CAACxB,EAAE,CAAC,WAAW,EAAEuB,SAAS,CAAC;;IAG1C,OAAO5E,IAAI,CAAC6E,KAAK,CAAC,CAACnB,IAAI,CACrBzD,GAAG,CAAC2B,QAAQ,IAAIA,QAAQ,CAACV,IAAI,IAAI,EAAE,CAAC,CACrC;EACH;EAEA4D,qBAAqBA,CAACH,OAAe;IACnC,OAAO3E,IAAI,CAAC,IAAI,CAACM,QAAQ,CACtBN,IAAI,CAAC,YAAY,CAAC,CAClBoD,MAAM,CAAC,GAAG,CAAC,CACXC,EAAE,CAAC,UAAU,EAAEsB,OAAO,CAAC,CACvBnB,KAAK,CAAC,MAAM,EAAE;MAAEC,SAAS,EAAE;IAAK,CAAE,CAAC,CAAC,CACpCC,IAAI,CACHzD,GAAG,CAAC2B,QAAQ,IAAIA,QAAQ,CAACV,IAAI,IAAI,EAAE,CAAC,CACrC;EACL;EAEA6D,cAAcA,CAACC,SAAc;IAC3B,OAAOhF,IAAI,CAAC,IAAI,CAACM,QAAQ,CACtBN,IAAI,CAAC,YAAY,CAAC,CAClB8D,MAAM,CAACkB,SAAS,CAAC,CACjB5B,MAAM,EAAE,CACRE,MAAM,EAAE,CAAC,CACTI,IAAI,CACHzD,GAAG,CAAC2B,QAAQ,IAAIA,QAAQ,CAACV,IAAI,CAAC,CAC/B;EACL;EAEM+D,kBAAkBA,CACtBpC,EAAU,EACVmC,SAOC;IAAA,IAAAE,MAAA;IAAA,OAAAjE,iBAAA;MAED,MAAMJ,IAAI,SAASqE,MAAI,CAAC5D,mBAAmB,EAAE;MAC7C,IAAI,CAACT,IAAI,EAAE,MAAM,IAAI8B,KAAK,CAAC,yBAAyB,CAAC;MAErD,OAAOuC,MAAI,CAAC5E,QAAQ,CACjBN,IAAI,CAAC,YAAY,CAAC,CAClBoE,MAAM,CAAC;QACN,GAAGY,SAAS;QACZhC,UAAU,EAAE,IAAIC,IAAI;OACrB,CAAC,CACDI,EAAE,CAAC,IAAI,EAAER,EAAE,CAAC,CACZQ,EAAE,CAAC,YAAY,EAAExC,IAAI,CAACgC,EAAE,CAAC;IAAC;EAC/B;EAEMsC,gBAAgBA,CAACtC,EAAU;IAAA,IAAAuC,OAAA;IAAA,OAAAnE,iBAAA;MAC/B,MAAMJ,IAAI,SAASuE,OAAI,CAAC9D,mBAAmB,EAAE;MAC7C,IAAI,CAACT,IAAI,EAAE,MAAM,IAAI8B,KAAK,CAAC,yBAAyB,CAAC;MAErD,OAAOyC,OAAI,CAAC9E,QAAQ,CACjBN,IAAI,CAAC,YAAY,CAAC,CAClByE,MAAM,EAAE,CACRpB,EAAE,CAAC,IAAI,EAAER,EAAE,CAAC,CACZQ,EAAE,CAAC,YAAY,EAAExC,IAAI,CAACgC,EAAE,CAAC;IAAC;EAC/B;EAEA;EACAwC,aAAaA,CAAA;IACX,OAAOrF,IAAI,CAAC,IAAI,CAACM,QAAQ,CACtBN,IAAI,CAAC,YAAY,CAAC,CAClBoD,MAAM,CAAC,MAAM,CAAC,CACdI,KAAK,CAAC,MAAM,CAAC,CAAC,CACdE,IAAI,CACHzD,GAAG,CAAC2B,QAAQ,IAAI,CAACA,QAAQ,CAACV,IAAI,IAAI,EAAE,EAAEjB,GAAG,CAACqF,GAAG,IAAIA,GAAG,CAACxC,IAAI,CAAC,CAAC,CAC5D;EACL;;;uBAjRW3C,eAAe;IAAA;EAAA;;;aAAfA,eAAe;MAAAoF,OAAA,EAAfpF,eAAe,CAAAqF,IAAA;MAAAC,UAAA,EAFd;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}